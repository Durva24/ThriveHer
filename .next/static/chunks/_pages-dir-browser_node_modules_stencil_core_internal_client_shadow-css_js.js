"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_pages-dir-browser_node_modules_stencil_core_internal_client_shadow-css_js"],{

/***/ "(pages-dir-browser)/./node_modules/@stencil/core/internal/client/shadow-css.js":
/*!******************************************************************!*\
  !*** ./node_modules/@stencil/core/internal/client/shadow-css.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scopeCss: () => (/* binding */ scopeCss)\n/* harmony export */ });\n// src/utils/regular-expression.ts\nvar escapeRegExpSpecialCharacters = (text) => {\n  return text.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n};\n\n// src/utils/shadow-css.ts\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from `webcomponents.js` to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nvar safeSelector = (selector) => {\n  const placeholders = [];\n  let index = 0;\n  selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(keep);\n    index++;\n    return replaceBy;\n  });\n  const content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(exp);\n    index++;\n    return pseudo + replaceBy;\n  });\n  const ss = {\n    content,\n    placeholders\n  };\n  return ss;\n};\nvar restoreSafeSelector = (placeholders, content) => {\n  return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nvar _polyfillHost = \"-shadowcsshost\";\nvar _polyfillSlotted = \"-shadowcssslotted\";\nvar _polyfillHostContext = \"-shadowcsscontext\";\nvar _parenSuffix = \")(?:\\\\(((?:\\\\([^)(]*\\\\)|[^)(]*)+?)\\\\))?([^,{]*)\";\nvar _cssColonHostRe = new RegExp(\"(\" + _polyfillHost + _parenSuffix, \"gim\");\nvar _cssColonHostContextRe = new RegExp(\"(\" + _polyfillHostContext + _parenSuffix, \"gim\");\nvar _cssColonSlottedRe = new RegExp(\"(\" + _polyfillSlotted + _parenSuffix, \"gim\");\nvar _polyfillHostNoCombinator = _polyfillHost + \"-no-combinator\";\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nvar _selectorReSuffix = \"([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$\";\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar createSupportsRuleRe = (selector) => new RegExp(`((?<!(^@supports(.*)))|(?<={.*))(${selector}\\\\b)`, \"gim\");\nvar _colonSlottedRe = createSupportsRuleRe(\"::slotted\");\nvar _colonHostRe = createSupportsRuleRe(\":host\");\nvar _colonHostContextRe = createSupportsRuleRe(\":host-context\");\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nvar stripComments = (input) => {\n  return input.replace(_commentRe, \"\");\n};\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nvar extractCommentsWithHash = (input) => {\n  return input.match(_commentWithHashRe) || [];\n};\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nvar OPEN_CURLY = \"{\";\nvar CLOSE_CURLY = \"}\";\nvar BLOCK_PLACEHOLDER = \"%BLOCK%\";\nvar processRules = (input, ruleCallback) => {\n  const inputWithEscapedBlocks = escapeBlocks(input);\n  let nextBlockIndex = 0;\n  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n    const selector = m[2];\n    let content = \"\";\n    let suffix = m[4];\n    let contentPrefix = \"\";\n    if (suffix && suffix.startsWith(\"{\" + BLOCK_PLACEHOLDER)) {\n      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n      contentPrefix = \"{\";\n    }\n    const cssRule = {\n      selector,\n      content\n    };\n    const rule = ruleCallback(cssRule);\n    return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n  });\n};\nvar escapeBlocks = (input) => {\n  const inputParts = input.split(_curlyRe);\n  const resultParts = [];\n  const escapedBlocks = [];\n  let bracketCount = 0;\n  let currentBlockParts = [];\n  for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n    const part = inputParts[partIndex];\n    if (part === CLOSE_CURLY) {\n      bracketCount--;\n    }\n    if (bracketCount > 0) {\n      currentBlockParts.push(part);\n    } else {\n      if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(\"\"));\n        resultParts.push(BLOCK_PLACEHOLDER);\n        currentBlockParts = [];\n      }\n      resultParts.push(part);\n    }\n    if (part === OPEN_CURLY) {\n      bracketCount++;\n    }\n  }\n  if (currentBlockParts.length > 0) {\n    escapedBlocks.push(currentBlockParts.join(\"\"));\n    resultParts.push(BLOCK_PLACEHOLDER);\n  }\n  const strEscapedBlocks = {\n    escapedString: resultParts.join(\"\"),\n    blocks: escapedBlocks\n  };\n  return strEscapedBlocks;\n};\nvar insertPolyfillHostInCssText = (cssText) => {\n  cssText = cssText.replace(_colonHostContextRe, `$1${_polyfillHostContext}`).replace(_colonHostRe, `$1${_polyfillHost}`).replace(_colonSlottedRe, `$1${_polyfillSlotted}`);\n  return cssText;\n};\nvar convertColonRule = (cssText, regExp, partReplacer) => {\n  return cssText.replace(regExp, (...m) => {\n    if (m[2]) {\n      const parts = m[2].split(\",\");\n      const r = [];\n      for (let i = 0; i < parts.length; i++) {\n        const p = parts[i].trim();\n        if (!p) break;\n        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n      }\n      return r.join(\",\");\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n};\nvar colonHostPartReplacer = (host, part, suffix) => {\n  return host + part.replace(_polyfillHost, \"\") + suffix;\n};\nvar convertColonHost = (cssText) => {\n  return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nvar colonHostContextPartReplacer = (host, part, suffix) => {\n  if (part.indexOf(_polyfillHost) > -1) {\n    return colonHostPartReplacer(host, part, suffix);\n  } else {\n    return host + part + suffix + \", \" + part + \" \" + host + suffix;\n  }\n};\nvar convertColonSlotted = (cssText, slotScopeId) => {\n  const slotClass = \".\" + slotScopeId + \" > \";\n  const selectors = [];\n  cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n    if (m[2]) {\n      const compound = m[2].trim();\n      const suffix = m[3];\n      const slottedSelector = slotClass + compound + suffix;\n      let prefixSelector = \"\";\n      for (let i = m[4] - 1; i >= 0; i--) {\n        const char = m[5][i];\n        if (char === \"}\" || char === \",\") {\n          break;\n        }\n        prefixSelector = char + prefixSelector;\n      }\n      const orgSelector = (prefixSelector + slottedSelector).trim();\n      const addedSelector = `${prefixSelector.trimEnd()}${slottedSelector.trim()}`.trim();\n      if (orgSelector !== addedSelector) {\n        const updatedSelector = `${addedSelector}, ${orgSelector}`;\n        selectors.push({\n          orgSelector,\n          updatedSelector\n        });\n      }\n      return slottedSelector;\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n  return {\n    selectors,\n    cssText\n  };\n};\nvar convertColonHostContext = (cssText) => {\n  return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nvar convertShadowDOMSelectors = (cssText) => {\n  return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, \" \"), cssText);\n};\nvar makeScopeMatcher = (scopeSelector2) => {\n  const lre = /\\[/g;\n  const rre = /\\]/g;\n  scopeSelector2 = scopeSelector2.replace(lre, \"\\\\[\").replace(rre, \"\\\\]\");\n  return new RegExp(\"^(\" + scopeSelector2 + \")\" + _selectorReSuffix, \"m\");\n};\nvar selectorNeedsScoping = (selector, scopeSelector2) => {\n  const re = makeScopeMatcher(scopeSelector2);\n  return !re.test(selector);\n};\nvar injectScopingSelector = (selector, scopingSelector) => {\n  return selector.replace(_selectorPartsRe, (_, before = \"\", _colonGroup, colon = \"\", after = \"\") => {\n    return before + scopingSelector + colon + after;\n  });\n};\nvar applySimpleSelectorScope = (selector, scopeSelector2, hostSelector) => {\n  _polyfillHostRe.lastIndex = 0;\n  if (_polyfillHostRe.test(selector)) {\n    const replaceBy = `.${hostSelector}`;\n    return selector.replace(_polyfillHostNoCombinatorRe, (_, selector2) => injectScopingSelector(selector2, replaceBy)).replace(_polyfillHostRe, replaceBy + \" \");\n  }\n  return scopeSelector2 + \" \" + selector;\n};\nvar applyStrictSelectorScope = (selector, scopeSelector2, hostSelector) => {\n  const isRe = /\\[is=([^\\]]*)\\]/g;\n  scopeSelector2 = scopeSelector2.replace(isRe, (_, ...parts) => parts[0]);\n  const className = \".\" + scopeSelector2;\n  const _scopeSelectorPart = (p) => {\n    let scopedP = p.trim();\n    if (!scopedP) {\n      return \"\";\n    }\n    if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n      scopedP = applySimpleSelectorScope(p, scopeSelector2, hostSelector);\n    } else {\n      const t = p.replace(_polyfillHostRe, \"\");\n      if (t.length > 0) {\n        scopedP = injectScopingSelector(t, className);\n      }\n    }\n    return scopedP;\n  };\n  const safeContent = safeSelector(selector);\n  selector = safeContent.content;\n  let scopedSelector = \"\";\n  let startIndex = 0;\n  let res;\n  const sep = /( |>|\\+|~(?!=))\\s*/g;\n  const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n  let shouldScope = !hasHost;\n  while ((res = sep.exec(selector)) !== null) {\n    const separator = res[1];\n    const part2 = selector.slice(startIndex, res.index).trim();\n    shouldScope = shouldScope || part2.indexOf(_polyfillHostNoCombinator) > -1;\n    const scopedPart = shouldScope ? _scopeSelectorPart(part2) : part2;\n    scopedSelector += `${scopedPart} ${separator} `;\n    startIndex = sep.lastIndex;\n  }\n  const part = selector.substring(startIndex);\n  shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n  scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n  return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nvar scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n  return selector.split(\",\").map((shallowPart) => {\n    if (slotSelector && shallowPart.indexOf(\".\" + slotSelector) > -1) {\n      return shallowPart.trim();\n    }\n    if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n      return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n    } else {\n      return shallowPart.trim();\n    }\n  }).join(\", \");\n};\nvar scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector) => {\n  return processRules(cssText, (rule) => {\n    let selector = rule.selector;\n    let content = rule.content;\n    if (rule.selector[0] !== \"@\") {\n      selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n    } else if (rule.selector.startsWith(\"@media\") || rule.selector.startsWith(\"@supports\") || rule.selector.startsWith(\"@page\") || rule.selector.startsWith(\"@document\")) {\n      content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n    }\n    const cssRule = {\n      selector: selector.replace(/\\s{2,}/g, \" \").trim(),\n      content\n    };\n    return cssRule;\n  });\n};\nvar scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId) => {\n  cssText = insertPolyfillHostInCssText(cssText);\n  cssText = convertColonHost(cssText);\n  cssText = convertColonHostContext(cssText);\n  const slotted = convertColonSlotted(cssText, slotScopeId);\n  cssText = slotted.cssText;\n  cssText = convertShadowDOMSelectors(cssText);\n  if (scopeId) {\n    cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n  }\n  cssText = replaceShadowCssHost(cssText, hostScopeId);\n  cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, \" $1 \");\n  return {\n    cssText: cssText.trim(),\n    // We need to replace the shadow CSS host string in each of these selectors since we created\n    // them prior to the replacement happening in the components CSS text.\n    slottedSelectors: slotted.selectors.map((ref) => ({\n      orgSelector: replaceShadowCssHost(ref.orgSelector, hostScopeId),\n      updatedSelector: replaceShadowCssHost(ref.updatedSelector, hostScopeId)\n    }))\n  };\n};\nvar replaceShadowCssHost = (cssText, hostScopeId) => {\n  return cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n};\nvar scopeCss = (cssText, scopeId) => {\n  const hostScopeId = scopeId + \"-h\";\n  const slotScopeId = scopeId + \"-s\";\n  const commentsWithHash = extractCommentsWithHash(cssText);\n  cssText = stripComments(cssText);\n  const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n  cssText = [scoped.cssText, ...commentsWithHash].join(\"\\n\");\n  scoped.slottedSelectors.forEach((slottedSelector) => {\n    const regex = new RegExp(escapeRegExpSpecialCharacters(slottedSelector.orgSelector), \"g\");\n    cssText = cssText.replace(regex, slottedSelector.updatedSelector);\n  });\n  return cssText;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac3RlbmNpbC9jb3JlL2ludGVybmFsL2NsaWVudC9zaGFkb3ctY3NzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLE1BQU07QUFDcEM7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsOEJBQThCLE1BQU07QUFDcEM7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRTtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQSxpRkFBaUYsT0FBTyxTQUFTO0FBQ2pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsRUFBRSxFQUFFLGNBQWMsUUFBUSxLQUFLLFVBQVU7QUFDakUsb0JBQW9CO0FBQ3BCO0FBQ0EsbUJBQW1CO0FBQ25CLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLEtBQUssRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsT0FBTztBQUNsRixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsK0JBQStCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxxQkFBcUIsOEJBQThCLGNBQWMsaUNBQWlDLGlCQUFpQjtBQUN6SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixrQkFBa0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixRQUFRO0FBQ3JDO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IseUJBQXlCLEVBQUUsdUJBQXVCO0FBQ2pGO0FBQ0EsbUNBQW1DLGNBQWMsSUFBSSxZQUFZO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGFBQWE7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsWUFBWSxFQUFFLFdBQVc7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxHQUFHO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsOERBQThELFlBQVk7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBR0UiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL1Rocml2ZUhlci9ub2RlX21vZHVsZXMvQHN0ZW5jaWwvY29yZS9pbnRlcm5hbC9jbGllbnQvc2hhZG93LWNzcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvdXRpbHMvcmVndWxhci1leHByZXNzaW9uLnRzXG52YXIgZXNjYXBlUmVnRXhwU3BlY2lhbENoYXJhY3RlcnMgPSAodGV4dCkgPT4ge1xuICByZXR1cm4gdGV4dC5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgXCJcXFxcJCZcIik7XG59O1xuXG4vLyBzcmMvdXRpbHMvc2hhZG93LWNzcy50c1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqXG4gKiBUaGlzIGZpbGUgaXMgYSBwb3J0IG9mIHNoYWRvd0NTUyBmcm9tIGB3ZWJjb21wb25lbnRzLmpzYCB0byBUeXBlU2NyaXB0LlxuICogaHR0cHM6Ly9naXRodWIuY29tL3dlYmNvbXBvbmVudHMvd2ViY29tcG9uZW50c2pzL2Jsb2IvNGVmZWNkN2UwZS9zcmMvU2hhZG93Q1NTL1NoYWRvd0NTUy5qc1xuICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iL21hc3Rlci9wYWNrYWdlcy9jb21waWxlci9zcmMvc2hhZG93X2Nzcy50c1xuICovXG52YXIgc2FmZVNlbGVjdG9yID0gKHNlbGVjdG9yKSA9PiB7XG4gIGNvbnN0IHBsYWNlaG9sZGVycyA9IFtdO1xuICBsZXQgaW5kZXggPSAwO1xuICBzZWxlY3RvciA9IHNlbGVjdG9yLnJlcGxhY2UoLyhcXFtbXlxcXV0qXFxdKS9nLCAoXywga2VlcCkgPT4ge1xuICAgIGNvbnN0IHJlcGxhY2VCeSA9IGBfX3BoLSR7aW5kZXh9X19gO1xuICAgIHBsYWNlaG9sZGVycy5wdXNoKGtlZXApO1xuICAgIGluZGV4Kys7XG4gICAgcmV0dXJuIHJlcGxhY2VCeTtcbiAgfSk7XG4gIGNvbnN0IGNvbnRlbnQgPSBzZWxlY3Rvci5yZXBsYWNlKC8oOm50aC1bLVxcd10rKShcXChbXildK1xcKSkvZywgKF8sIHBzZXVkbywgZXhwKSA9PiB7XG4gICAgY29uc3QgcmVwbGFjZUJ5ID0gYF9fcGgtJHtpbmRleH1fX2A7XG4gICAgcGxhY2Vob2xkZXJzLnB1c2goZXhwKTtcbiAgICBpbmRleCsrO1xuICAgIHJldHVybiBwc2V1ZG8gKyByZXBsYWNlQnk7XG4gIH0pO1xuICBjb25zdCBzcyA9IHtcbiAgICBjb250ZW50LFxuICAgIHBsYWNlaG9sZGVyc1xuICB9O1xuICByZXR1cm4gc3M7XG59O1xudmFyIHJlc3RvcmVTYWZlU2VsZWN0b3IgPSAocGxhY2Vob2xkZXJzLCBjb250ZW50KSA9PiB7XG4gIHJldHVybiBjb250ZW50LnJlcGxhY2UoL19fcGgtKFxcZCspX18vZywgKF8sIGluZGV4KSA9PiBwbGFjZWhvbGRlcnNbK2luZGV4XSk7XG59O1xudmFyIF9wb2x5ZmlsbEhvc3QgPSBcIi1zaGFkb3djc3Nob3N0XCI7XG52YXIgX3BvbHlmaWxsU2xvdHRlZCA9IFwiLXNoYWRvd2Nzc3Nsb3R0ZWRcIjtcbnZhciBfcG9seWZpbGxIb3N0Q29udGV4dCA9IFwiLXNoYWRvd2Nzc2NvbnRleHRcIjtcbnZhciBfcGFyZW5TdWZmaXggPSBcIikoPzpcXFxcKCgoPzpcXFxcKFteKShdKlxcXFwpfFteKShdKikrPylcXFxcKSk/KFteLHtdKilcIjtcbnZhciBfY3NzQ29sb25Ib3N0UmUgPSBuZXcgUmVnRXhwKFwiKFwiICsgX3BvbHlmaWxsSG9zdCArIF9wYXJlblN1ZmZpeCwgXCJnaW1cIik7XG52YXIgX2Nzc0NvbG9uSG9zdENvbnRleHRSZSA9IG5ldyBSZWdFeHAoXCIoXCIgKyBfcG9seWZpbGxIb3N0Q29udGV4dCArIF9wYXJlblN1ZmZpeCwgXCJnaW1cIik7XG52YXIgX2Nzc0NvbG9uU2xvdHRlZFJlID0gbmV3IFJlZ0V4cChcIihcIiArIF9wb2x5ZmlsbFNsb3R0ZWQgKyBfcGFyZW5TdWZmaXgsIFwiZ2ltXCIpO1xudmFyIF9wb2x5ZmlsbEhvc3ROb0NvbWJpbmF0b3IgPSBfcG9seWZpbGxIb3N0ICsgXCItbm8tY29tYmluYXRvclwiO1xudmFyIF9wb2x5ZmlsbEhvc3ROb0NvbWJpbmF0b3JSZSA9IC8tc2hhZG93Y3NzaG9zdC1uby1jb21iaW5hdG9yKFteXFxzXSopLztcbnZhciBfc2hhZG93RE9NU2VsZWN0b3JzUmUgPSBbLzo6c2hhZG93L2csIC86OmNvbnRlbnQvZ107XG52YXIgX3NlbGVjdG9yUmVTdWZmaXggPSBcIihbPlxcXFxzfitbLix7Ol1bXFxcXHNcXFxcU10qKT8kXCI7XG52YXIgX3BvbHlmaWxsSG9zdFJlID0gLy1zaGFkb3djc3Nob3N0L2dpbTtcbnZhciBjcmVhdGVTdXBwb3J0c1J1bGVSZSA9IChzZWxlY3RvcikgPT4gbmV3IFJlZ0V4cChgKCg/PCEoXkBzdXBwb3J0cyguKikpKXwoPzw9ey4qKSkoJHtzZWxlY3Rvcn1cXFxcYilgLCBcImdpbVwiKTtcbnZhciBfY29sb25TbG90dGVkUmUgPSBjcmVhdGVTdXBwb3J0c1J1bGVSZShcIjo6c2xvdHRlZFwiKTtcbnZhciBfY29sb25Ib3N0UmUgPSBjcmVhdGVTdXBwb3J0c1J1bGVSZShcIjpob3N0XCIpO1xudmFyIF9jb2xvbkhvc3RDb250ZXh0UmUgPSBjcmVhdGVTdXBwb3J0c1J1bGVSZShcIjpob3N0LWNvbnRleHRcIik7XG52YXIgX2NvbW1lbnRSZSA9IC9cXC9cXCpcXHMqW1xcc1xcU10qP1xcKlxcLy9nO1xudmFyIHN0cmlwQ29tbWVudHMgPSAoaW5wdXQpID0+IHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoX2NvbW1lbnRSZSwgXCJcIik7XG59O1xudmFyIF9jb21tZW50V2l0aEhhc2hSZSA9IC9cXC9cXCpcXHMqI1xccypzb3VyY2UoTWFwcGluZyk/VVJMPVtcXHNcXFNdKz9cXCpcXC8vZztcbnZhciBleHRyYWN0Q29tbWVudHNXaXRoSGFzaCA9IChpbnB1dCkgPT4ge1xuICByZXR1cm4gaW5wdXQubWF0Y2goX2NvbW1lbnRXaXRoSGFzaFJlKSB8fCBbXTtcbn07XG52YXIgX3J1bGVSZSA9IC8oXFxzKikoW147XFx7XFx9XSs/KShcXHMqKSgoPzp7JUJMT0NLJX0/XFxzKjs/KXwoPzpcXHMqOykpL2c7XG52YXIgX2N1cmx5UmUgPSAvKFt7fV0pL2c7XG52YXIgX3NlbGVjdG9yUGFydHNSZSA9IC8oXi4qP1teXFxcXF0pPz8oKDorKSguKil8JCkvO1xudmFyIE9QRU5fQ1VSTFkgPSBcIntcIjtcbnZhciBDTE9TRV9DVVJMWSA9IFwifVwiO1xudmFyIEJMT0NLX1BMQUNFSE9MREVSID0gXCIlQkxPQ0slXCI7XG52YXIgcHJvY2Vzc1J1bGVzID0gKGlucHV0LCBydWxlQ2FsbGJhY2spID0+IHtcbiAgY29uc3QgaW5wdXRXaXRoRXNjYXBlZEJsb2NrcyA9IGVzY2FwZUJsb2NrcyhpbnB1dCk7XG4gIGxldCBuZXh0QmxvY2tJbmRleCA9IDA7XG4gIHJldHVybiBpbnB1dFdpdGhFc2NhcGVkQmxvY2tzLmVzY2FwZWRTdHJpbmcucmVwbGFjZShfcnVsZVJlLCAoLi4ubSkgPT4ge1xuICAgIGNvbnN0IHNlbGVjdG9yID0gbVsyXTtcbiAgICBsZXQgY29udGVudCA9IFwiXCI7XG4gICAgbGV0IHN1ZmZpeCA9IG1bNF07XG4gICAgbGV0IGNvbnRlbnRQcmVmaXggPSBcIlwiO1xuICAgIGlmIChzdWZmaXggJiYgc3VmZml4LnN0YXJ0c1dpdGgoXCJ7XCIgKyBCTE9DS19QTEFDRUhPTERFUikpIHtcbiAgICAgIGNvbnRlbnQgPSBpbnB1dFdpdGhFc2NhcGVkQmxvY2tzLmJsb2Nrc1tuZXh0QmxvY2tJbmRleCsrXTtcbiAgICAgIHN1ZmZpeCA9IHN1ZmZpeC5zdWJzdHJpbmcoQkxPQ0tfUExBQ0VIT0xERVIubGVuZ3RoICsgMSk7XG4gICAgICBjb250ZW50UHJlZml4ID0gXCJ7XCI7XG4gICAgfVxuICAgIGNvbnN0IGNzc1J1bGUgPSB7XG4gICAgICBzZWxlY3RvcixcbiAgICAgIGNvbnRlbnRcbiAgICB9O1xuICAgIGNvbnN0IHJ1bGUgPSBydWxlQ2FsbGJhY2soY3NzUnVsZSk7XG4gICAgcmV0dXJuIGAke21bMV19JHtydWxlLnNlbGVjdG9yfSR7bVszXX0ke2NvbnRlbnRQcmVmaXh9JHtydWxlLmNvbnRlbnR9JHtzdWZmaXh9YDtcbiAgfSk7XG59O1xudmFyIGVzY2FwZUJsb2NrcyA9IChpbnB1dCkgPT4ge1xuICBjb25zdCBpbnB1dFBhcnRzID0gaW5wdXQuc3BsaXQoX2N1cmx5UmUpO1xuICBjb25zdCByZXN1bHRQYXJ0cyA9IFtdO1xuICBjb25zdCBlc2NhcGVkQmxvY2tzID0gW107XG4gIGxldCBicmFja2V0Q291bnQgPSAwO1xuICBsZXQgY3VycmVudEJsb2NrUGFydHMgPSBbXTtcbiAgZm9yIChsZXQgcGFydEluZGV4ID0gMDsgcGFydEluZGV4IDwgaW5wdXRQYXJ0cy5sZW5ndGg7IHBhcnRJbmRleCsrKSB7XG4gICAgY29uc3QgcGFydCA9IGlucHV0UGFydHNbcGFydEluZGV4XTtcbiAgICBpZiAocGFydCA9PT0gQ0xPU0VfQ1VSTFkpIHtcbiAgICAgIGJyYWNrZXRDb3VudC0tO1xuICAgIH1cbiAgICBpZiAoYnJhY2tldENvdW50ID4gMCkge1xuICAgICAgY3VycmVudEJsb2NrUGFydHMucHVzaChwYXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGN1cnJlbnRCbG9ja1BhcnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZXNjYXBlZEJsb2Nrcy5wdXNoKGN1cnJlbnRCbG9ja1BhcnRzLmpvaW4oXCJcIikpO1xuICAgICAgICByZXN1bHRQYXJ0cy5wdXNoKEJMT0NLX1BMQUNFSE9MREVSKTtcbiAgICAgICAgY3VycmVudEJsb2NrUGFydHMgPSBbXTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdFBhcnRzLnB1c2gocGFydCk7XG4gICAgfVxuICAgIGlmIChwYXJ0ID09PSBPUEVOX0NVUkxZKSB7XG4gICAgICBicmFja2V0Q291bnQrKztcbiAgICB9XG4gIH1cbiAgaWYgKGN1cnJlbnRCbG9ja1BhcnRzLmxlbmd0aCA+IDApIHtcbiAgICBlc2NhcGVkQmxvY2tzLnB1c2goY3VycmVudEJsb2NrUGFydHMuam9pbihcIlwiKSk7XG4gICAgcmVzdWx0UGFydHMucHVzaChCTE9DS19QTEFDRUhPTERFUik7XG4gIH1cbiAgY29uc3Qgc3RyRXNjYXBlZEJsb2NrcyA9IHtcbiAgICBlc2NhcGVkU3RyaW5nOiByZXN1bHRQYXJ0cy5qb2luKFwiXCIpLFxuICAgIGJsb2NrczogZXNjYXBlZEJsb2Nrc1xuICB9O1xuICByZXR1cm4gc3RyRXNjYXBlZEJsb2Nrcztcbn07XG52YXIgaW5zZXJ0UG9seWZpbGxIb3N0SW5Dc3NUZXh0ID0gKGNzc1RleHQpID0+IHtcbiAgY3NzVGV4dCA9IGNzc1RleHQucmVwbGFjZShfY29sb25Ib3N0Q29udGV4dFJlLCBgJDEke19wb2x5ZmlsbEhvc3RDb250ZXh0fWApLnJlcGxhY2UoX2NvbG9uSG9zdFJlLCBgJDEke19wb2x5ZmlsbEhvc3R9YCkucmVwbGFjZShfY29sb25TbG90dGVkUmUsIGAkMSR7X3BvbHlmaWxsU2xvdHRlZH1gKTtcbiAgcmV0dXJuIGNzc1RleHQ7XG59O1xudmFyIGNvbnZlcnRDb2xvblJ1bGUgPSAoY3NzVGV4dCwgcmVnRXhwLCBwYXJ0UmVwbGFjZXIpID0+IHtcbiAgcmV0dXJuIGNzc1RleHQucmVwbGFjZShyZWdFeHAsICguLi5tKSA9PiB7XG4gICAgaWYgKG1bMl0pIHtcbiAgICAgIGNvbnN0IHBhcnRzID0gbVsyXS5zcGxpdChcIixcIik7XG4gICAgICBjb25zdCByID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHAgPSBwYXJ0c1tpXS50cmltKCk7XG4gICAgICAgIGlmICghcCkgYnJlYWs7XG4gICAgICAgIHIucHVzaChwYXJ0UmVwbGFjZXIoX3BvbHlmaWxsSG9zdE5vQ29tYmluYXRvciwgcCwgbVszXSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHIuam9pbihcIixcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBfcG9seWZpbGxIb3N0Tm9Db21iaW5hdG9yICsgbVszXTtcbiAgICB9XG4gIH0pO1xufTtcbnZhciBjb2xvbkhvc3RQYXJ0UmVwbGFjZXIgPSAoaG9zdCwgcGFydCwgc3VmZml4KSA9PiB7XG4gIHJldHVybiBob3N0ICsgcGFydC5yZXBsYWNlKF9wb2x5ZmlsbEhvc3QsIFwiXCIpICsgc3VmZml4O1xufTtcbnZhciBjb252ZXJ0Q29sb25Ib3N0ID0gKGNzc1RleHQpID0+IHtcbiAgcmV0dXJuIGNvbnZlcnRDb2xvblJ1bGUoY3NzVGV4dCwgX2Nzc0NvbG9uSG9zdFJlLCBjb2xvbkhvc3RQYXJ0UmVwbGFjZXIpO1xufTtcbnZhciBjb2xvbkhvc3RDb250ZXh0UGFydFJlcGxhY2VyID0gKGhvc3QsIHBhcnQsIHN1ZmZpeCkgPT4ge1xuICBpZiAocGFydC5pbmRleE9mKF9wb2x5ZmlsbEhvc3QpID4gLTEpIHtcbiAgICByZXR1cm4gY29sb25Ib3N0UGFydFJlcGxhY2VyKGhvc3QsIHBhcnQsIHN1ZmZpeCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGhvc3QgKyBwYXJ0ICsgc3VmZml4ICsgXCIsIFwiICsgcGFydCArIFwiIFwiICsgaG9zdCArIHN1ZmZpeDtcbiAgfVxufTtcbnZhciBjb252ZXJ0Q29sb25TbG90dGVkID0gKGNzc1RleHQsIHNsb3RTY29wZUlkKSA9PiB7XG4gIGNvbnN0IHNsb3RDbGFzcyA9IFwiLlwiICsgc2xvdFNjb3BlSWQgKyBcIiA+IFwiO1xuICBjb25zdCBzZWxlY3RvcnMgPSBbXTtcbiAgY3NzVGV4dCA9IGNzc1RleHQucmVwbGFjZShfY3NzQ29sb25TbG90dGVkUmUsICguLi5tKSA9PiB7XG4gICAgaWYgKG1bMl0pIHtcbiAgICAgIGNvbnN0IGNvbXBvdW5kID0gbVsyXS50cmltKCk7XG4gICAgICBjb25zdCBzdWZmaXggPSBtWzNdO1xuICAgICAgY29uc3Qgc2xvdHRlZFNlbGVjdG9yID0gc2xvdENsYXNzICsgY29tcG91bmQgKyBzdWZmaXg7XG4gICAgICBsZXQgcHJlZml4U2VsZWN0b3IgPSBcIlwiO1xuICAgICAgZm9yIChsZXQgaSA9IG1bNF0gLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBjb25zdCBjaGFyID0gbVs1XVtpXTtcbiAgICAgICAgaWYgKGNoYXIgPT09IFwifVwiIHx8IGNoYXIgPT09IFwiLFwiKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcHJlZml4U2VsZWN0b3IgPSBjaGFyICsgcHJlZml4U2VsZWN0b3I7XG4gICAgICB9XG4gICAgICBjb25zdCBvcmdTZWxlY3RvciA9IChwcmVmaXhTZWxlY3RvciArIHNsb3R0ZWRTZWxlY3RvcikudHJpbSgpO1xuICAgICAgY29uc3QgYWRkZWRTZWxlY3RvciA9IGAke3ByZWZpeFNlbGVjdG9yLnRyaW1FbmQoKX0ke3Nsb3R0ZWRTZWxlY3Rvci50cmltKCl9YC50cmltKCk7XG4gICAgICBpZiAob3JnU2VsZWN0b3IgIT09IGFkZGVkU2VsZWN0b3IpIHtcbiAgICAgICAgY29uc3QgdXBkYXRlZFNlbGVjdG9yID0gYCR7YWRkZWRTZWxlY3Rvcn0sICR7b3JnU2VsZWN0b3J9YDtcbiAgICAgICAgc2VsZWN0b3JzLnB1c2goe1xuICAgICAgICAgIG9yZ1NlbGVjdG9yLFxuICAgICAgICAgIHVwZGF0ZWRTZWxlY3RvclxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzbG90dGVkU2VsZWN0b3I7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBfcG9seWZpbGxIb3N0Tm9Db21iaW5hdG9yICsgbVszXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHNlbGVjdG9ycyxcbiAgICBjc3NUZXh0XG4gIH07XG59O1xudmFyIGNvbnZlcnRDb2xvbkhvc3RDb250ZXh0ID0gKGNzc1RleHQpID0+IHtcbiAgcmV0dXJuIGNvbnZlcnRDb2xvblJ1bGUoY3NzVGV4dCwgX2Nzc0NvbG9uSG9zdENvbnRleHRSZSwgY29sb25Ib3N0Q29udGV4dFBhcnRSZXBsYWNlcik7XG59O1xudmFyIGNvbnZlcnRTaGFkb3dET01TZWxlY3RvcnMgPSAoY3NzVGV4dCkgPT4ge1xuICByZXR1cm4gX3NoYWRvd0RPTVNlbGVjdG9yc1JlLnJlZHVjZSgocmVzdWx0LCBwYXR0ZXJuKSA9PiByZXN1bHQucmVwbGFjZShwYXR0ZXJuLCBcIiBcIiksIGNzc1RleHQpO1xufTtcbnZhciBtYWtlU2NvcGVNYXRjaGVyID0gKHNjb3BlU2VsZWN0b3IyKSA9PiB7XG4gIGNvbnN0IGxyZSA9IC9cXFsvZztcbiAgY29uc3QgcnJlID0gL1xcXS9nO1xuICBzY29wZVNlbGVjdG9yMiA9IHNjb3BlU2VsZWN0b3IyLnJlcGxhY2UobHJlLCBcIlxcXFxbXCIpLnJlcGxhY2UocnJlLCBcIlxcXFxdXCIpO1xuICByZXR1cm4gbmV3IFJlZ0V4cChcIl4oXCIgKyBzY29wZVNlbGVjdG9yMiArIFwiKVwiICsgX3NlbGVjdG9yUmVTdWZmaXgsIFwibVwiKTtcbn07XG52YXIgc2VsZWN0b3JOZWVkc1Njb3BpbmcgPSAoc2VsZWN0b3IsIHNjb3BlU2VsZWN0b3IyKSA9PiB7XG4gIGNvbnN0IHJlID0gbWFrZVNjb3BlTWF0Y2hlcihzY29wZVNlbGVjdG9yMik7XG4gIHJldHVybiAhcmUudGVzdChzZWxlY3Rvcik7XG59O1xudmFyIGluamVjdFNjb3BpbmdTZWxlY3RvciA9IChzZWxlY3Rvciwgc2NvcGluZ1NlbGVjdG9yKSA9PiB7XG4gIHJldHVybiBzZWxlY3Rvci5yZXBsYWNlKF9zZWxlY3RvclBhcnRzUmUsIChfLCBiZWZvcmUgPSBcIlwiLCBfY29sb25Hcm91cCwgY29sb24gPSBcIlwiLCBhZnRlciA9IFwiXCIpID0+IHtcbiAgICByZXR1cm4gYmVmb3JlICsgc2NvcGluZ1NlbGVjdG9yICsgY29sb24gKyBhZnRlcjtcbiAgfSk7XG59O1xudmFyIGFwcGx5U2ltcGxlU2VsZWN0b3JTY29wZSA9IChzZWxlY3Rvciwgc2NvcGVTZWxlY3RvcjIsIGhvc3RTZWxlY3RvcikgPT4ge1xuICBfcG9seWZpbGxIb3N0UmUubGFzdEluZGV4ID0gMDtcbiAgaWYgKF9wb2x5ZmlsbEhvc3RSZS50ZXN0KHNlbGVjdG9yKSkge1xuICAgIGNvbnN0IHJlcGxhY2VCeSA9IGAuJHtob3N0U2VsZWN0b3J9YDtcbiAgICByZXR1cm4gc2VsZWN0b3IucmVwbGFjZShfcG9seWZpbGxIb3N0Tm9Db21iaW5hdG9yUmUsIChfLCBzZWxlY3RvcjIpID0+IGluamVjdFNjb3BpbmdTZWxlY3RvcihzZWxlY3RvcjIsIHJlcGxhY2VCeSkpLnJlcGxhY2UoX3BvbHlmaWxsSG9zdFJlLCByZXBsYWNlQnkgKyBcIiBcIik7XG4gIH1cbiAgcmV0dXJuIHNjb3BlU2VsZWN0b3IyICsgXCIgXCIgKyBzZWxlY3Rvcjtcbn07XG52YXIgYXBwbHlTdHJpY3RTZWxlY3RvclNjb3BlID0gKHNlbGVjdG9yLCBzY29wZVNlbGVjdG9yMiwgaG9zdFNlbGVjdG9yKSA9PiB7XG4gIGNvbnN0IGlzUmUgPSAvXFxbaXM9KFteXFxdXSopXFxdL2c7XG4gIHNjb3BlU2VsZWN0b3IyID0gc2NvcGVTZWxlY3RvcjIucmVwbGFjZShpc1JlLCAoXywgLi4ucGFydHMpID0+IHBhcnRzWzBdKTtcbiAgY29uc3QgY2xhc3NOYW1lID0gXCIuXCIgKyBzY29wZVNlbGVjdG9yMjtcbiAgY29uc3QgX3Njb3BlU2VsZWN0b3JQYXJ0ID0gKHApID0+IHtcbiAgICBsZXQgc2NvcGVkUCA9IHAudHJpbSgpO1xuICAgIGlmICghc2NvcGVkUCkge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIGlmIChwLmluZGV4T2YoX3BvbHlmaWxsSG9zdE5vQ29tYmluYXRvcikgPiAtMSkge1xuICAgICAgc2NvcGVkUCA9IGFwcGx5U2ltcGxlU2VsZWN0b3JTY29wZShwLCBzY29wZVNlbGVjdG9yMiwgaG9zdFNlbGVjdG9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdCA9IHAucmVwbGFjZShfcG9seWZpbGxIb3N0UmUsIFwiXCIpO1xuICAgICAgaWYgKHQubGVuZ3RoID4gMCkge1xuICAgICAgICBzY29wZWRQID0gaW5qZWN0U2NvcGluZ1NlbGVjdG9yKHQsIGNsYXNzTmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzY29wZWRQO1xuICB9O1xuICBjb25zdCBzYWZlQ29udGVudCA9IHNhZmVTZWxlY3RvcihzZWxlY3Rvcik7XG4gIHNlbGVjdG9yID0gc2FmZUNvbnRlbnQuY29udGVudDtcbiAgbGV0IHNjb3BlZFNlbGVjdG9yID0gXCJcIjtcbiAgbGV0IHN0YXJ0SW5kZXggPSAwO1xuICBsZXQgcmVzO1xuICBjb25zdCBzZXAgPSAvKCB8PnxcXCt8fig/IT0pKVxccyovZztcbiAgY29uc3QgaGFzSG9zdCA9IHNlbGVjdG9yLmluZGV4T2YoX3BvbHlmaWxsSG9zdE5vQ29tYmluYXRvcikgPiAtMTtcbiAgbGV0IHNob3VsZFNjb3BlID0gIWhhc0hvc3Q7XG4gIHdoaWxlICgocmVzID0gc2VwLmV4ZWMoc2VsZWN0b3IpKSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHNlcGFyYXRvciA9IHJlc1sxXTtcbiAgICBjb25zdCBwYXJ0MiA9IHNlbGVjdG9yLnNsaWNlKHN0YXJ0SW5kZXgsIHJlcy5pbmRleCkudHJpbSgpO1xuICAgIHNob3VsZFNjb3BlID0gc2hvdWxkU2NvcGUgfHwgcGFydDIuaW5kZXhPZihfcG9seWZpbGxIb3N0Tm9Db21iaW5hdG9yKSA+IC0xO1xuICAgIGNvbnN0IHNjb3BlZFBhcnQgPSBzaG91bGRTY29wZSA/IF9zY29wZVNlbGVjdG9yUGFydChwYXJ0MikgOiBwYXJ0MjtcbiAgICBzY29wZWRTZWxlY3RvciArPSBgJHtzY29wZWRQYXJ0fSAke3NlcGFyYXRvcn0gYDtcbiAgICBzdGFydEluZGV4ID0gc2VwLmxhc3RJbmRleDtcbiAgfVxuICBjb25zdCBwYXJ0ID0gc2VsZWN0b3Iuc3Vic3RyaW5nKHN0YXJ0SW5kZXgpO1xuICBzaG91bGRTY29wZSA9IHNob3VsZFNjb3BlIHx8IHBhcnQuaW5kZXhPZihfcG9seWZpbGxIb3N0Tm9Db21iaW5hdG9yKSA+IC0xO1xuICBzY29wZWRTZWxlY3RvciArPSBzaG91bGRTY29wZSA/IF9zY29wZVNlbGVjdG9yUGFydChwYXJ0KSA6IHBhcnQ7XG4gIHJldHVybiByZXN0b3JlU2FmZVNlbGVjdG9yKHNhZmVDb250ZW50LnBsYWNlaG9sZGVycywgc2NvcGVkU2VsZWN0b3IpO1xufTtcbnZhciBzY29wZVNlbGVjdG9yID0gKHNlbGVjdG9yLCBzY29wZVNlbGVjdG9yVGV4dCwgaG9zdFNlbGVjdG9yLCBzbG90U2VsZWN0b3IpID0+IHtcbiAgcmV0dXJuIHNlbGVjdG9yLnNwbGl0KFwiLFwiKS5tYXAoKHNoYWxsb3dQYXJ0KSA9PiB7XG4gICAgaWYgKHNsb3RTZWxlY3RvciAmJiBzaGFsbG93UGFydC5pbmRleE9mKFwiLlwiICsgc2xvdFNlbGVjdG9yKSA+IC0xKSB7XG4gICAgICByZXR1cm4gc2hhbGxvd1BhcnQudHJpbSgpO1xuICAgIH1cbiAgICBpZiAoc2VsZWN0b3JOZWVkc1Njb3Bpbmcoc2hhbGxvd1BhcnQsIHNjb3BlU2VsZWN0b3JUZXh0KSkge1xuICAgICAgcmV0dXJuIGFwcGx5U3RyaWN0U2VsZWN0b3JTY29wZShzaGFsbG93UGFydCwgc2NvcGVTZWxlY3RvclRleHQsIGhvc3RTZWxlY3RvcikudHJpbSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc2hhbGxvd1BhcnQudHJpbSgpO1xuICAgIH1cbiAgfSkuam9pbihcIiwgXCIpO1xufTtcbnZhciBzY29wZVNlbGVjdG9ycyA9IChjc3NUZXh0LCBzY29wZVNlbGVjdG9yVGV4dCwgaG9zdFNlbGVjdG9yLCBzbG90U2VsZWN0b3IpID0+IHtcbiAgcmV0dXJuIHByb2Nlc3NSdWxlcyhjc3NUZXh0LCAocnVsZSkgPT4ge1xuICAgIGxldCBzZWxlY3RvciA9IHJ1bGUuc2VsZWN0b3I7XG4gICAgbGV0IGNvbnRlbnQgPSBydWxlLmNvbnRlbnQ7XG4gICAgaWYgKHJ1bGUuc2VsZWN0b3JbMF0gIT09IFwiQFwiKSB7XG4gICAgICBzZWxlY3RvciA9IHNjb3BlU2VsZWN0b3IocnVsZS5zZWxlY3Rvciwgc2NvcGVTZWxlY3RvclRleHQsIGhvc3RTZWxlY3Rvciwgc2xvdFNlbGVjdG9yKTtcbiAgICB9IGVsc2UgaWYgKHJ1bGUuc2VsZWN0b3Iuc3RhcnRzV2l0aChcIkBtZWRpYVwiKSB8fCBydWxlLnNlbGVjdG9yLnN0YXJ0c1dpdGgoXCJAc3VwcG9ydHNcIikgfHwgcnVsZS5zZWxlY3Rvci5zdGFydHNXaXRoKFwiQHBhZ2VcIikgfHwgcnVsZS5zZWxlY3Rvci5zdGFydHNXaXRoKFwiQGRvY3VtZW50XCIpKSB7XG4gICAgICBjb250ZW50ID0gc2NvcGVTZWxlY3RvcnMocnVsZS5jb250ZW50LCBzY29wZVNlbGVjdG9yVGV4dCwgaG9zdFNlbGVjdG9yLCBzbG90U2VsZWN0b3IpO1xuICAgIH1cbiAgICBjb25zdCBjc3NSdWxlID0ge1xuICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yLnJlcGxhY2UoL1xcc3syLH0vZywgXCIgXCIpLnRyaW0oKSxcbiAgICAgIGNvbnRlbnRcbiAgICB9O1xuICAgIHJldHVybiBjc3NSdWxlO1xuICB9KTtcbn07XG52YXIgc2NvcGVDc3NUZXh0ID0gKGNzc1RleHQsIHNjb3BlSWQsIGhvc3RTY29wZUlkLCBzbG90U2NvcGVJZCkgPT4ge1xuICBjc3NUZXh0ID0gaW5zZXJ0UG9seWZpbGxIb3N0SW5Dc3NUZXh0KGNzc1RleHQpO1xuICBjc3NUZXh0ID0gY29udmVydENvbG9uSG9zdChjc3NUZXh0KTtcbiAgY3NzVGV4dCA9IGNvbnZlcnRDb2xvbkhvc3RDb250ZXh0KGNzc1RleHQpO1xuICBjb25zdCBzbG90dGVkID0gY29udmVydENvbG9uU2xvdHRlZChjc3NUZXh0LCBzbG90U2NvcGVJZCk7XG4gIGNzc1RleHQgPSBzbG90dGVkLmNzc1RleHQ7XG4gIGNzc1RleHQgPSBjb252ZXJ0U2hhZG93RE9NU2VsZWN0b3JzKGNzc1RleHQpO1xuICBpZiAoc2NvcGVJZCkge1xuICAgIGNzc1RleHQgPSBzY29wZVNlbGVjdG9ycyhjc3NUZXh0LCBzY29wZUlkLCBob3N0U2NvcGVJZCwgc2xvdFNjb3BlSWQpO1xuICB9XG4gIGNzc1RleHQgPSByZXBsYWNlU2hhZG93Q3NzSG9zdChjc3NUZXh0LCBob3N0U2NvcGVJZCk7XG4gIGNzc1RleHQgPSBjc3NUZXh0LnJlcGxhY2UoLz5cXHMqXFwqXFxzKyhbXnssIF0rKS9nbSwgXCIgJDEgXCIpO1xuICByZXR1cm4ge1xuICAgIGNzc1RleHQ6IGNzc1RleHQudHJpbSgpLFxuICAgIC8vIFdlIG5lZWQgdG8gcmVwbGFjZSB0aGUgc2hhZG93IENTUyBob3N0IHN0cmluZyBpbiBlYWNoIG9mIHRoZXNlIHNlbGVjdG9ycyBzaW5jZSB3ZSBjcmVhdGVkXG4gICAgLy8gdGhlbSBwcmlvciB0byB0aGUgcmVwbGFjZW1lbnQgaGFwcGVuaW5nIGluIHRoZSBjb21wb25lbnRzIENTUyB0ZXh0LlxuICAgIHNsb3R0ZWRTZWxlY3RvcnM6IHNsb3R0ZWQuc2VsZWN0b3JzLm1hcCgocmVmKSA9PiAoe1xuICAgICAgb3JnU2VsZWN0b3I6IHJlcGxhY2VTaGFkb3dDc3NIb3N0KHJlZi5vcmdTZWxlY3RvciwgaG9zdFNjb3BlSWQpLFxuICAgICAgdXBkYXRlZFNlbGVjdG9yOiByZXBsYWNlU2hhZG93Q3NzSG9zdChyZWYudXBkYXRlZFNlbGVjdG9yLCBob3N0U2NvcGVJZClcbiAgICB9KSlcbiAgfTtcbn07XG52YXIgcmVwbGFjZVNoYWRvd0Nzc0hvc3QgPSAoY3NzVGV4dCwgaG9zdFNjb3BlSWQpID0+IHtcbiAgcmV0dXJuIGNzc1RleHQucmVwbGFjZSgvLXNoYWRvd2Nzc2hvc3Qtbm8tY29tYmluYXRvci9nLCBgLiR7aG9zdFNjb3BlSWR9YCk7XG59O1xudmFyIHNjb3BlQ3NzID0gKGNzc1RleHQsIHNjb3BlSWQpID0+IHtcbiAgY29uc3QgaG9zdFNjb3BlSWQgPSBzY29wZUlkICsgXCItaFwiO1xuICBjb25zdCBzbG90U2NvcGVJZCA9IHNjb3BlSWQgKyBcIi1zXCI7XG4gIGNvbnN0IGNvbW1lbnRzV2l0aEhhc2ggPSBleHRyYWN0Q29tbWVudHNXaXRoSGFzaChjc3NUZXh0KTtcbiAgY3NzVGV4dCA9IHN0cmlwQ29tbWVudHMoY3NzVGV4dCk7XG4gIGNvbnN0IHNjb3BlZCA9IHNjb3BlQ3NzVGV4dChjc3NUZXh0LCBzY29wZUlkLCBob3N0U2NvcGVJZCwgc2xvdFNjb3BlSWQpO1xuICBjc3NUZXh0ID0gW3Njb3BlZC5jc3NUZXh0LCAuLi5jb21tZW50c1dpdGhIYXNoXS5qb2luKFwiXFxuXCIpO1xuICBzY29wZWQuc2xvdHRlZFNlbGVjdG9ycy5mb3JFYWNoKChzbG90dGVkU2VsZWN0b3IpID0+IHtcbiAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXhwU3BlY2lhbENoYXJhY3RlcnMoc2xvdHRlZFNlbGVjdG9yLm9yZ1NlbGVjdG9yKSwgXCJnXCIpO1xuICAgIGNzc1RleHQgPSBjc3NUZXh0LnJlcGxhY2UocmVnZXgsIHNsb3R0ZWRTZWxlY3Rvci51cGRhdGVkU2VsZWN0b3IpO1xuICB9KTtcbiAgcmV0dXJuIGNzc1RleHQ7XG59O1xuZXhwb3J0IHtcbiAgc2NvcGVDc3Ncbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@stencil/core/internal/client/shadow-css.js\n"));

/***/ })

}]);