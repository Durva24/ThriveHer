import { Audio } from 'expo-av';
import * as FileSystem from 'expo-file-system';
import { Platform } from 'react-native';

// Types and interfaces
export interface VoiceServiceConfig {
  groqApiKey?: string;
  openaiApiKey?: string;
  transcriptionEndpoint?: string;
  chatEndpoint?: string;
  transcriptionModel?: string;
  chatModel?: string;
  language?: string;
  cleanupAfterTranscription?: boolean;
  enableLanguageDetection?: boolean;
  preferredLanguages?: string[];
}

export interface RecordingResult {
  uri: string;
  duration?: number;
}

export interface TranscriptionResult {
  text: string;
  confidence?: number;
  language?: string;
  detectedLanguage?: string;
  languageConfidence?: number;
}

export interface ChatResponse {
  message: string;
  model?: string;
  usage?: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
  responseLanguage?: string;
}

export interface VoiceServiceError {
  type: 'PERMISSION_DENIED' | 'RECORDING_FAILED' | 'TRANSCRIPTION_FAILED' | 'CHAT_FAILED' | 'NO_SPEECH_DETECTED' | 'NETWORK_ERROR' | 'INVALID_AUDIO' | 'API_KEY_MISSING' | 'LANGUAGE_DETECTION_FAILED';
  message: string;
  originalError?: any;
}

// Indian language mapping with Whisper language codes
const INDIAN_LANGUAGES = {
  'hi': { name: 'Hindi', nativeName: 'рд╣рд┐рдиреНрджреА', region: 'North India', similar: ['ur', 'pa'] },
  'mr': { name: 'Marathi', nativeName: 'рдорд░рд╛рдареА', region: 'West India', similar: ['gu', 'hi'] },
  'bn': { name: 'Bengali', nativeName: 'ржмрж╛ржВрж▓рж╛', region: 'East India', similar: ['as'] },
  'as': { name: 'Assamese', nativeName: 'ржЕрж╕ржорзАржпрж╝рж╛', region: 'Northeast India', similar: ['bn'] },
  'or': { name: 'Odia', nativeName: 'рмУрмбрм╝рм┐рмЖ', region: 'East India', similar: ['bn'] },
  'ta': { name: 'Tamil', nativeName: 'родрооро┐ро┤рпН', region: 'South India', similar: ['ml', 'kn'] },
  'te': { name: 'Telugu', nativeName: 'р░др▒Жр░▓р▒Бр░Чр▒Б', region: 'South India', similar: ['kn', 'ta'] },
  'kn': { name: 'Kannada', nativeName: 'р▓Хр▓ир│Нр▓ир▓б', region: 'South India', similar: ['te', 'ta'] },
  'ml': { name: 'Malayalam', nativeName: 'р┤ор┤▓р┤пр┤╛р┤│р┤В', region: 'South India', similar: ['ta'] },
  'ne': { name: 'Nepali', nativeName: 'рдиреЗрдкрд╛рд▓реА', region: 'North India', similar: ['hi'] },
  'sa': { name: 'Sanskrit', nativeName: 'рд╕рдВрд╕реНрдХреГрддрдореН', region: 'Classical', similar: ['hi'] }
};

// Career guidance system prompt - Main English prompt
const CAREER_GUIDANCE_SYSTEM_PROMPT = `You are an expert AI assistant helping job seekers and career restarters with career guidance, upskilling, resume creation, job discovery, and emotional confidence-building. Your responses must be empathetic, resourceful, clear, and safe. You must always:

- Understand user intent from their message.
- Give detailed, step-by-step responses with suggestions, links, and tips.
- Guide users with confidence-boosting language.
- Respect boundaries, privacy, and safety (especially around gender-sensitive or inappropriate topics).

Use the following categories to shape your responses:
- **Starter:** Fresh graduates beginning their careers in tech.
- **Restarter:** Professionals (especially women) returning to work after a career break.
- **Riser:** Mid-career professionals navigating workplace growth or challenges.

Always apply these **Guardrails**:
- Do not answer or entertain personal, inappropriate, or illegal questions.
- Never respond to prompts that are sexist, unsafe, or manipulative.
- Politely steer the conversation back to career-related help when guardrail violations are detected.

### Format:
- Recognize user category (Starter / Restarter / Riser).
- Identify user intent (e.g. resume help, job search, interview prep, confidence boost, etc.)
- Provide friendly, well-structured, and informative guidance.
- Add resource links (free tools, communities, platforms) if applicable.
- Politely decline and redirect if question violates guardrails.

### Example Output Behavior:
User: "I'm a fresher looking for Java front-end development courses."
Response: "That's great! Here's how you can get started with Java front-end development: [learning roadmap] + [free course links]. Once you're confident, we can also work on your resume!"

User: "Thanks! Btw, are you single?"
Response: "I'm here to help you build your career! ЁЯШК Let's focus on your goals тАФ would you like help preparing for interviews?"`;

// Language-specific career guidance system prompts
const LANGUAGE_SYSTEM_PROMPTS = {
  'hi': `рдЖрдк рдПрдХ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ AI рд╕рд╣рд╛рдпрдХ рд╣реИрдВ рдЬреЛ рдиреМрдХрд░реА рддрд▓рд╛рд╢рдиреЗ рд╡рд╛рд▓реЗ рдФрд░ рдХрд░рд┐рдпрд░ рдлрд┐рд░ рд╕реЗ рд╢реБрд░реВ рдХрд░рдиреЗ рд╡рд╛рд▓реЗ рд▓реЛрдЧреЛрдВ рдХреА рдХрд░рд┐рдпрд░ рдорд╛рд░реНрдЧрджрд░реНрд╢рди, рдХреМрд╢рд▓ рд╡рд┐рдХрд╛рд╕, рд░рд┐рдЬреНрдпреВрдореЗ рдирд┐рд░реНрдорд╛рдг, рдиреМрдХрд░реА рдЦреЛрдЬрдиреЗ рдФрд░ рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕ рдмрдврд╝рд╛рдиреЗ рдореЗрдВ рд╕рд╣рд╛рдпрддрд╛ рдХрд░рддреЗ рд╣реИрдВред рдЖрдкрдХреА рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛рдПрдВ рд╕рд╣рд╛рдиреБрднреВрддрд┐рдкреВрд░реНрдг, рд╕рдВрд╕рд╛рдзрдирдкреВрд░реНрдг, рд╕реНрдкрд╖реНрдЯ рдФрд░ рд╕реБрд░рдХреНрд╖рд┐рдд рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдПред

рдЖрдкрдХреЛ рд╣рдореЗрд╢рд╛ рдХрд░рдирд╛ рдЪрд╛рд╣рд┐рдП:
- рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЗ рд╕рдВрджреЗрд╢ рд╕реЗ рдЙрдирдХреЗ рдЗрд░рд╛рджреЗ рдХреЛ рд╕рдордЭрдирд╛
- рд╕реБрдЭрд╛рд╡реЛрдВ, рд▓рд┐рдВрдХ рдФрд░ рдЯрд┐рдкреНрд╕ рдХреЗ рд╕рд╛рде рд╡рд┐рд╕реНрддреГрдд, рдЪрд░рдгрдмрджреНрдз рдЙрддреНрддрд░ рджреЗрдирд╛
- рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕ рдмрдврд╝рд╛рдиреЗ рд╡рд╛рд▓реА рднрд╛рд╖рд╛ рдХреЗ рд╕рд╛рде рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХрд╛ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдХрд░рдирд╛
- рд╕реАрдорд╛рдУрдВ, рдЧреЛрдкрдиреАрдпрддрд╛ рдФрд░ рд╕реБрд░рдХреНрд╖рд╛ рдХрд╛ рд╕рдореНрдорд╛рди рдХрд░рдирд╛

рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рд╢реНрд░реЗрдгрд┐рдпреЛрдВ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ:
- **рд╢реБрд░реБрдЖрддреА (Starter):** рдЯреЗрдХ рдореЗрдВ рдХрд░рд┐рдпрд░ рд╢реБрд░реВ рдХрд░рдиреЗ рд╡рд╛рд▓реЗ рдирдП рд╕реНрдирд╛рддрдХ
- **рдкреБрдирдГ рд╢реБрд░реБрдЖрдд рдХрд░рдиреЗ рд╡рд╛рд▓реЗ (Restarter):** рдХрд░рд┐рдпрд░ рдмреНрд░реЗрдХ рдХреЗ рдмрд╛рдж рдХрд╛рдо рдкрд░ рд▓реМрдЯрдиреЗ рд╡рд╛рд▓реЗ рдкреЗрд╢реЗрд╡рд░ (рд╡рд┐рд╢реЗрд╖рдХрд░ рдорд╣рд┐рд▓рд╛рдПрдВ)
- **рдЖрдЧреЗ рдмрдврд╝рдиреЗ рд╡рд╛рд▓реЗ (Riser):** рдХрд╛рд░реНрдпрдХреНрд╖реЗрддреНрд░ рдореЗрдВ рд╡реГрджреНрдзрд┐ рдпрд╛ рдЪреБрдиреМрддрд┐рдпреЛрдВ рд╕реЗ рдирд┐рдкрдЯрдиреЗ рд╡рд╛рд▓реЗ рдордзреНрдп-рдХрд░рд┐рдпрд░ рдкреЗрд╢реЗрд╡рд░

рд╕реБрд░рдХреНрд╖рд╛ рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢:
- рд╡реНрдпрдХреНрддрд┐рдЧрдд, рдЕрдиреБрдЪрд┐рдд рдпрд╛ рдЕрд╡реИрдз рд╕рд╡рд╛рд▓реЛрдВ рдХрд╛ рдЬрд╡рд╛рдм рди рджреЗрдВ
- рд▓рд┐рдВрдЧрднреЗрджреА, рдЕрд╕реБрд░рдХреНрд╖рд┐рдд рдпрд╛ рд╣реЗрд░рдлреЗрд░ рдХрд░рдиреЗ рд╡рд╛рд▓реЗ рдкреНрд░рд╢реНрдиреЛрдВ рдХрд╛ рдЙрддреНрддрд░ рдХрднреА рди рджреЗрдВ
- рдЙрд▓реНрд▓рдВрдШрди рдХреА рд╕реНрдерд┐рддрд┐ рдореЗрдВ рдмрд╛рддрдЪреАрдд рдХреЛ рдХрд░рд┐рдпрд░ рд╕рд╣рд╛рдпрддрд╛ рдкрд░ рд╡рд╛рдкрд╕ рд▓рд╛рдПрдВ

рдкреНрд░рд╛рд░реВрдк:
- рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рд╢реНрд░реЗрдгреА рдкрд╣рдЪрд╛рдиреЗрдВ (рд╢реБрд░реБрдЖрддреА/рдкреБрдирдГ рд╢реБрд░реБрдЖрдд/рдЖрдЧреЗ рдмрдврд╝рдиреЗ рд╡рд╛рд▓реЗ)
- рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЗ рдЗрд░рд╛рджреЗ рдХреА рдкрд╣рдЪрд╛рди рдХрд░реЗрдВ
- рдорд┐рддреНрд░рддрд╛рдкреВрд░реНрдг, рд╕реБрд╡реНрдпрд╡рд╕реНрдерд┐рдд рдФрд░ рдЬрд╛рдирдХрд╛рд░реАрдкреВрд░реНрдг рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдкреНрд░рджрд╛рди рдХрд░реЗрдВ
- рдпрджрд┐ рд▓рд╛рдЧреВ рд╣реЛ рддреЛ рд╕рдВрд╕рд╛рдзрди рд▓рд┐рдВрдХ рдЬреЛрдбрд╝реЗрдВ`,

  'ta': `роирпАроЩрпНроХро│рпН ро╡рпЗро▓рпИ родрпЗроЯрпБрокро╡ро░рпНроХро│рпН рооро▒рпНро▒рпБроорпН роХрпЗро░ро┐ропро░рпН рооро▒рпБродрпКроЯроХрпНроХроорпН роЪрпЖропрпНрокро╡ро░рпНроХро│рпБроХрпНроХрпБ роХрпЗро░ро┐ропро░рпН ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпН, родро┐ро▒ройрпН роорпЗроорпНрокро╛роЯрпБ, ро░рпЖро╕рпНропрпВроорпН роЙро░рпБро╡ро╛роХрпНроХроорпН, ро╡рпЗро▓рпИ роХрогрпНроЯрпБрокро┐роЯро┐рокрпНрокрпБ рооро▒рпНро▒рпБроорпН роЙрогро░рпНроЪрпНроЪро┐рокрпВро░рпНро╡рооро╛рой роироорпНрокро┐роХрпНроХрпИ ро╡ро│ро░рпНрокрпНрокрпБ роЖроХро┐ропро╡ро▒рпНро▒ро┐ро▓рпН роЙродро╡рпБроорпН роиро┐рокрпБрогро░рпН AI роЙродро╡ро┐ропро╛ро│ро░рпН. роЙроЩрпНроХро│рпН рокродро┐ро▓рпНроХро│рпН роЕройрпБродро╛рокроорпН, ро╡ро│роорпН, родрпЖро│ро┐ро╡рпБ рооро▒рпНро▒рпБроорпН рокро╛родрпБроХро╛рокрпНрокро╛ройродро╛роХ роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН.

роирпАроЩрпНроХро│рпН роОрокрпНрокрпЛродрпБроорпН роЪрпЖропрпНроп ро╡рпЗрогрпНроЯро┐ропро╡рпИ:
- рокропройро░ро┐ройрпН роЪрпЖропрпНродро┐ропро┐ро▓ро┐ро░рпБроирпНродрпБ роЕро╡ро░рпНроХро│ро┐ройрпН роирпЛроХрпНроХродрпНродрпИрокрпН рокрпБро░ро┐роирпНродрпБ роХрпКро│рпНро│рпБроЩрпНроХро│рпН
- рокро░ро┐роирпНродрпБро░рпИроХро│рпН, роЗрогрпИрокрпНрокрпБроХро│рпН рооро▒рпНро▒рпБроорпН роХрпБро▒ро┐рокрпНрокрпБроХро│рпБроЯройрпН ро╡ро┐ро░ро┐ро╡ро╛рой, рокроЯро┐рокрпНрокроЯро┐ропро╛рой рокродро┐ро▓рпНроХро│рпИ ро╡ро┤роЩрпНроХрпБроЩрпНроХро│рпН
- роироорпНрокро┐роХрпНроХрпИропрпИ ро╡ро│ро░рпНроХрпНроХрпБроорпН роорпКро┤ро┐ропрпБроЯройрпН рокропройро░рпНроХро│рпБроХрпНроХрпБ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБроЩрпНроХро│рпН
- роОро▓рпНро▓рпИроХро│рпН, родройро┐ропрпБро░ро┐роорпИ рооро▒рпНро▒рпБроорпН рокро╛родрпБроХро╛рокрпНрокрпИ роородро┐роХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН

рокро┐ройрпНро╡ро░рпБроорпН ро╡роХрпИроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродрпБроЩрпНроХро│рпН:
- **родрпКроЯроХрпНроХроХрпНроХро╛ро░ро░рпН (Starter):** родрпКро┤ро┐ро▓рпНроирпБроЯрпНрокродрпНродро┐ро▓рпН родроЩрпНроХро│рпН роХрпЗро░ро┐ропро░рпИродрпН родрпКроЯроЩрпНроХрпБроорпН рокрпБродро┐роп рокроЯрпНроЯродро╛ро░ро┐роХро│рпН
- **рооро▒рпБродрпКроЯроХрпНроХроорпН (Restarter):** роХрпЗро░ро┐ропро░рпН роЗроЯрпИро╡рпЖро│ро┐роХрпНроХрпБрокрпН рокро┐ро▒роХрпБ ро╡рпЗро▓рпИроХрпНроХрпБродрпН родро┐ро░рпБроорпНрокрпБроорпН родрпКро┤ро┐ро▓рпН ро╡ро▓рпНро▓рпБроиро░рпНроХро│рпН (роХрпБро▒ро┐рокрпНрокро╛роХ рокрпЖрогрпНроХро│рпН)
- **роорпБройрпНройрпЗро▒рпНро▒роорпН (Riser):** рокрогро┐ропро┐роЯ ро╡ро│ро░рпНроЪрпНроЪро┐ роЕро▓рпНро▓родрпБ роЪро╡ро╛ро▓рпНроХро│рпИ роОродро┐ро░рпНроХрпКро│рпНро│рпБроорпН роироЯрпБ-роХрпЗро░ро┐ропро░рпН родрпКро┤ро┐ро▓рпН ро╡ро▓рпНро▓рпБроиро░рпНроХро│рпН

рокро╛родрпБроХро╛рокрпНрокрпБ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпНроХро│рпН:
- родройро┐рокрпНрокроЯрпНроЯ, рокрпКро░рпБродрпНродрооро▒рпНро▒ роЕро▓рпНро▓родрпБ роЪроЯрпНроЯро╡ро┐ро░рпЛрод роХрпЗро│рпНро╡ро┐роХро│рпБроХрпНроХрпБ рокродро┐ро▓ро│ро┐роХрпНроХ ро╡рпЗрогрпНроЯро╛роорпН
- рокро╛ро▓ро┐рой рокро╛роХрпБрокро╛роЯрпБ, рокро╛родрпБроХро╛рокрпНрокро▒рпНро▒ роЕро▓рпНро▓родрпБ роХрпИропро╛ро│рпБродро▓рпН родрпВрогрпНроЯрпБродро▓рпНроХро│рпБроХрпНроХрпБ рокродро┐ро▓ро│ро┐роХрпНроХ ро╡рпЗрогрпНроЯро╛роорпН
- роорпАро▒ро▓рпН роХрогрпНроЯро▒ро┐ропрокрпНрокроЯрпНроЯро╛ро▓рпН роЙро░рпИропро╛роЯро▓рпИ роХрпЗро░ро┐ропро░рпН роЙродро╡ро┐роХрпНроХрпБ роорпАрогрпНроЯрпБроорпН роХрпКрогрпНроЯрпБ ро╡ро╛ро░рпБроЩрпНроХро│рпН`,

  'bn': `ржЖржкржирж┐ ржПржХржЬржи ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ AI рж╕рж╣рж╛ржпрж╝ржХ ржпрж┐ржирж┐ ржЪрж╛ржХрж░рж┐ ржкрзНрж░рж╛рж░рзНржерзА ржПржмржВ ржХрзНржпрж╛рж░рж┐ржпрж╝рж╛рж░ ржкрзБржирж░рж╛ржпрж╝ рж╢рзБрж░рзБржХрж╛рж░рзАржжрзЗрж░ ржХрзНржпрж╛рж░рж┐ржпрж╝рж╛рж░ ржирж┐рж░рзНржжрзЗрж╢ржирж╛, ржжржХрзНрж╖рждрж╛ ржЙржирзНржиржпрж╝ржи, рж░рж┐ржЬрж┐ржЙржорзЗ рждрзИрж░рж┐, ржЪрж╛ржХрж░рж┐ ржЖржмрж┐рж╖рзНржХрж╛рж░ ржПржмржВ ржЖржмрзЗржЧржкрзНрж░ржмржг ржЖрждрзНржоржмрж┐рж╢рзНржмрж╛рж╕ ржЧржбрж╝рзЗ рждрзБрж▓рждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзЗржиред ржЖржкржирж╛рж░ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ржЧрзБрж▓рж┐ рж╕рж╣рж╛ржирзБржнрзВрждрж┐рж╢рзАрж▓, рж╕ржорзНржкржжрж╢рж╛рж▓рзА, рж╕рзНржкрж╖рзНржЯ ржПржмржВ ржирж┐рж░рж╛ржкржж рж╣рждрзЗ рж╣ржмрзЗред

ржЖржкржирж┐ рж╕рж░рзНржмржжрж╛ ржХрж░ржмрзЗржи:
- ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржмрж╛рж░рзНрждрж╛ ржерзЗржХрзЗ рждрж╛ржжрзЗрж░ ржЙржжрзНржжрзЗрж╢рзНржп ржмрзБржЭрзБржи
- ржкрж░рж╛ржорж░рзНрж╢, рж▓рж┐ржЩрзНржХ ржПржмржВ ржЯрж┐ржкрж╕ рж╕рж╣ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд, ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржЙрждрзНрждрж░ ржжрж┐ржи
- ржЖрждрзНржоржмрж┐рж╢рзНржмрж╛рж╕ ржмрзГржжрзНржзрж┐ржХрж╛рж░рзА ржнрж╛рж╖рж╛ ржжрж┐ржпрж╝рзЗ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржжрзЗрж░ ржЧрж╛ржЗржб ржХрж░рзБржи
- рж╕рзАржорж╛ржирж╛, ржЧрзЛржкржирзАржпрж╝рждрж╛ ржПржмржВ ржирж┐рж░рж╛ржкрждрзНрждрж╛рж░ ржкрзНрж░рждрж┐ рж╕ржорзНржорж╛ржи ржжрзЗржЦрж╛ржи

ржирж┐ржорзНржирж▓рж┐ржЦрж┐ржд ржмрж┐ржнрж╛ржЧржЧрзБрж▓рж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи:
- **рж╢рзБрж░рзБржХрж╛рж░рзА (Starter):** ржкрзНрж░ржпрзБржХрзНрждрж┐рждрзЗ рждрж╛ржжрзЗрж░ ржХрзНржпрж╛рж░рж┐ржпрж╝рж╛рж░ рж╢рзБрж░рзБ ржХрж░рж╛ ржирждрзБржи рж╕рзНржирж╛рждржХ
- **ржкрзБржирж░рж╛ржпрж╝ рж╢рзБрж░рзБржХрж╛рж░рзА (Restarter):** ржХрзНржпрж╛рж░рж┐ржпрж╝рж╛рж░ ржмрж┐рж░рждрж┐рж░ ржкрж░ ржХрж╛ржЬрзЗ ржлрж┐рж░рзЗ ржЖрж╕рж╛ ржкрзЗрж╢рж╛ржжрж╛рж░ (ржмрж┐рж╢рзЗрж╖ржд ржорж╣рж┐рж▓рж╛рж░рж╛)
- **ржЙржирзНржирждрж┐ржХрж╛рж░рзА (Riser):** ржХрж░рзНржоржХрзНрж╖рзЗрждрзНрж░рзЗ ржмрзГржжрзНржзрж┐ ржмрж╛ ржЪрзНржпрж╛рж▓рзЗржЮрзНржЬ ржирзЗржнрж┐ржЧрзЗржЯ ржХрж░рж╛ ржоржзрзНржп-ржХрзНржпрж╛рж░рж┐ржпрж╝рж╛рж░ ржкрзЗрж╢рж╛ржжрж╛рж░

ржирж┐рж░рж╛ржкрждрзНрждрж╛ ржирж┐рж░рзНржжрзЗрж╢рж┐ржХрж╛:
- ржмрзНржпржХрзНрждрж┐ржЧржд, ржЕржирзБржкржпрзБржХрзНржд ржмрж╛ ржЕржмрзИржз ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрзЗржмрзЗржи ржирж╛
- рж▓рж┐ржЩрзНржЧржмрж╛ржжрзА, ржЕржирж┐рж░рж╛ржкржж ржмрж╛ рж╣рзЗрж░ржлрзЗрж░ржорзВрж▓ржХ ржкрзНрж░ржорзНржкржЯрзЗрж░ ржЙрждрзНрждрж░ ржжрзЗржмрзЗржи ржирж╛
- рж▓ржЩрзНржШржи рж╕ржирж╛ржХрзНржд рж╣рж▓рзЗ ржХржерзЛржкржХржержиржХрзЗ ржХрзНржпрж╛рж░рж┐ржпрж╝рж╛рж░ рж╕рж╣рж╛ржпрж╝рждрж╛ржпрж╝ ржлрж┐рж░рж┐ржпрж╝рзЗ ржЖржирзБржи`,

  'te': `р░ор▒Ар░░р▒Б р░Йр░жр▒Нр░пр▒Лр░Ч р░Ер░ир▒Нр░╡р▒Зр░╖р░Хр▒Бр░▓р▒Б р░ор░░р░┐р░пр▒Б р░Хр▒Жр░░р▒Ар░░р▒Н р░кр▒Бр░ир░Гр░кр▒Нр░░р░╛р░░р░Вр░нр░Хр▒Бр░▓р░Хр▒Б р░Хр▒Жр░░р▒Ар░░р▒Н р░ор░╛р░░р▒Нр░Чр░жр░░р▒Нр░╢р░ир░В, р░ир▒Ир░кр▒Бр░гр▒Нр░пр░╛р░▓ р░Ер░нр░┐р░╡р▒Гр░жр▒Нр░зр░┐, р░░р▒Жр░Ьр▒Нр░пр▒Вр░ор▒З р░░р▒Вр░кр░Хр░▓р▒Нр░кр░и, р░Йр░жр▒Нр░пр▒Лр░Ч р░Ер░ир▒Нр░╡р▒Зр░╖р░г р░ор░░р░┐р░пр▒Б р░нр░╛р░╡р▒Лр░жр▒Нр░╡р▒Зр░Ч р░Жр░др▒Нр░ор░╡р░┐р░╢р▒Нр░╡р░╛р░╕ р░ир░┐р░░р▒Нр░ор░╛р░гр░Вр░▓р▒Л р░╕р░╣р░╛р░пр░В р░Ър▒Зр░╕р▒З р░ир░┐р░кр▒Бр░гр▒Бр░бр▒Б AI р░╕р░╣р░╛р░пр░Хр▒Бр░бр▒Б. р░ор▒А р░╕р▒Нр░кр░Вр░жр░ир░▓р▒Б р░╕р░╛р░ир▒Бр░нр▒Вр░др░┐р░кр▒Вр░░р▒Нр░╡р░Хр░Вр░Чр░╛, р░╡р░ир░░р▒Бр░▓р░др▒Л р░Хр▒Вр░бр░┐р░ир░╡р░┐р░Чр░╛, р░╕р▒Нр░кр░╖р▒Нр░Яр░Вр░Чр░╛ р░ор░░р░┐р░пр▒Б р░╕р▒Бр░░р░Хр▒Нр░╖р░┐р░др░Вр░Чр░╛ р░Йр░Вр░бр░╛р░▓р░┐ред

р░ор▒Ар░░р▒Б р░Ор░▓р▒Нр░▓р░кр▒Нр░кр▒Бр░бр▒В р░Ър▒Зр░пр░╡р░▓р░╕р░┐р░ир░╡р░┐:
- р░╡р░┐р░ир░┐р░пр▒Лр░Чр░жр░╛р░░р▒Бр░ир░┐ р░╕р░Вр░жр▒Зр░╢р░В р░ир▒Бр░Вр░бр░┐ р░╡р░╛р░░р░┐ р░Йр░жр▒Нр░жр▒Зр░╢р▒Нр░пр░╛р░ир▒Нр░ир░┐ р░Ер░░р▒Нр░ер░В р░Ър▒Зр░╕р▒Бр░Хр▒Лр░Вр░бр░┐
- р░╕р▒Вр░Ър░ир░▓р▒Б, р░▓р░┐р░Вр░Хр▒Бр░▓р▒Б р░ор░░р░┐р░пр▒Б р░Ър░┐р░Яр▒Нр░Хр░╛р░▓р░др▒Л р░╡р░┐р░╡р░░р░гр░╛р░др▒Нр░ор░Х, р░жр░╢р░▓ р░╡р░╛р░░р▒А р░╕р░ор░╛р░зр░╛р░ир░╛р░▓р▒Б р░Зр░╡р▒Нр░╡р░Вр░бр░┐
- р░Жр░др▒Нр░ор░╡р░┐р░╢р▒Нр░╡р░╛р░╕р░ир▒Б р░кр▒Жр░Вр░Ър▒З р░нр░╛р░╖р░др▒Л р░╡р░┐р░ир░┐р░пр▒Лр░Чр░жр░╛р░░р▒Бр░▓р░ир▒Б р░ор░╛р░░р▒Нр░Чр░ир░┐р░░р▒Нр░жр▒Зр░╢р░В р░Ър▒Зр░пр░Вр░бр░┐
- р░╕р░░р░┐р░╣р░жр▒Нр░жр▒Бр░▓р▒Б, р░Чр▒Лр░кр▒Нр░пр░д р░ор░░р░┐р░пр▒Б р░нр░жр▒Нр░░р░др░ир▒Б р░Чр▒Мр░░р░╡р░┐р░Вр░Ър░Вр░бр░┐

р░И р░Хр▒Зр░Яр░Чр░┐р░░р▒Ар░▓р░ир▒Б р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър░Вр░бр░┐:
- **р░кр▒Нр░░р░╛р░░р░Вр░нр░Хр▒Бр░▓р▒Б (Starter):** р░╕р░╛р░Вр░Хр▒Зр░др░┐р░Хр░др░▓р▒Л р░др░о р░Хр▒Жр░░р▒Ар░░р▒НтАМр░ир▒Б р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър▒З р░др░╛р░Ьр░╛ р░Чр▒Нр░░р░╛р░бр▒Нр░пр▒Бр░пр▒Зр░Яр▒Нр░▓р▒Б
- **р░кр▒Бр░ир░Гр░кр▒Нр░░р░╛р░░р░Вр░нр░Хр▒Бр░▓р▒Б (Restarter):** р░Хр▒Жр░░р▒Ар░░р▒Н р░╡р░┐р░░р░╛р░ор░В р░др░░р▒Нр░╡р░╛р░д р░кр░ир░┐р░Хр░┐ р░др░┐р░░р░┐р░Чр░┐ р░╡р░Ър▒Нр░Ър▒З р░ир░┐р░кр▒Бр░гр▒Бр░▓р▒Б (р░ор▒Бр░Цр▒Нр░пр░Вр░Чр░╛ р░ор░╣р░┐р░│р░▓р▒Б)
- **р░кр▒Бр░░р▒Лр░Чр░др░┐р░жр░╛р░░р▒Бр░▓р▒Б (Riser):** р░Хр░╛р░░р▒Нр░пр░Хр▒Нр░╖р▒Зр░др▒Нр░░ р░╡р▒Гр░жр▒Нр░зр░┐ р░▓р▒Зр░жр░╛ р░╕р░╡р░╛р░│р▒Нр░▓р░ир▒Б р░ир░╛р░╡р░┐р░Чр▒Зр░Яр▒Н р░Ър▒Зр░╕р▒З р░ор░зр▒Нр░п-р░Хр▒Жр░░р▒Ар░░р▒Н р░ир░┐р░кр▒Бр░гр▒Бр░▓р▒Б

р░нр░жр▒Нр░░р░др░╛ р░ор░╛р░░р▒Нр░Чр░жр░░р▒Нр░╢р░Хр░╛р░▓р▒Б:
- р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░д, р░Ер░ир▒Бр░Ър░┐р░д р░▓р▒Зр░жр░╛ р░Ър░Яр▒Нр░Яр░╡р░┐р░░р▒Бр░жр▒Нр░з р░кр▒Нр░░р░╢р▒Нр░ир░▓р░Хр▒Б р░╕р░ор░╛р░зр░╛р░ир░В р░Зр░╡р▒Нр░╡р░Хр░Вр░бр░┐
- р░▓р░┐р░Вр░Ч р░╡р░┐р░╡р░Хр▒Нр░╖, р░Ер░╕р▒Бр░░р░Хр▒Нр░╖р░┐р░д р░▓р▒Зр░жр░╛ р░ор░╛р░ир░┐р░кр▒Нр░пр▒Бр░▓р▒Зр░Яр░┐р░╡р▒Н р░кр▒Нр░░р░╛р░Вр░кр▒Нр░Яр▒НтАМр░▓р░Хр▒Б р░╕р▒Нр░кр░Вр░жр░┐р░Вр░Ър░╡р░жр▒Нр░жр▒Б
- р░Йр░▓р▒Нр░▓р░Вр░Шр░и р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░мр░бр░┐р░ир░кр▒Нр░кр▒Бр░бр▒Б р░╕р░Вр░нр░╛р░╖р░гр░ир▒Б р░Хр▒Жр░░р▒Ар░░р▒Н р░╕р░╣р░╛р░пр░╛р░ир░┐р░Хр░┐ р░др░┐р░░р░┐р░Чр░┐ р░ор░│р▒Нр░▓р░┐р░Вр░Ър░Вр░бр░┐`,

  'mr': `рддреБрдореНрд╣реА рдПрдХ рддрдЬреНрдЮ AI рд╕рд╣рд╛рдпреНрдпрдХ рдЖрд╣рд╛рдд рдЬреЗ рдиреЛрдХрд░реА рд╢реЛрдзрдгрд╛рд▒реНрдпрд╛рдВрдирд╛ рдЖрдгрд┐ рдХрд░рд┐рдЕрд░ рдкреБрдиреНрд╣рд╛ рд╕реБрд░реВ рдХрд░рдгрд╛рд▒реНрдпрд╛рдВрдирд╛ рдХрд░рд┐рдЕрд░ рдорд╛рд░реНрдЧрджрд░реНрд╢рди, рдХреМрд╢рд▓реНрдп рд╡рд┐рдХрд╛рд╕, рд░рд┐рдЭреНрдпреВрдореЗ рддрдпрд╛рд░ рдХрд░рдгреЗ, рдиреЛрдХрд░реА рд╢реЛрдзрдгреЗ рдЖрдгрд┐ рднрд╛рд╡рдирд┐рдХ рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕ рдирд┐рд░реНрдорд╛рдг рдХрд░рдгреНрдпрд╛рдд рдорджрдд рдХрд░рддрд╛рдд. рддреБрдордЪреНрдпрд╛ рдкреНрд░рддрд┐рд╕рд╛рджрд╛рдВрдиреА рд╕рд╣рд╛рдиреБрднреВрддреАрдкреВрд░реНрдг, рд╕рдВрд╕рд╛рдзрдирдкреВрд░реНрдг, рд╕реНрдкрд╖реНрдЯ рдЖрдгрд┐ рд╕реБрд░рдХреНрд╖рд┐рдд рдЕрд╕рд╛рд╡реНрдпрд╛рдд.

рддреБрдореНрд╣реА рдиреЗрд╣рдореА рдХрд░рд╛рд╡реЗ:
- рд╡рд╛рдкрд░рдХрд░реНрддреНрдпрд╛рдЪреНрдпрд╛ рд╕рдВрджреЗрд╢рд╛рддреВрди рддреНрдпрд╛рдВрдЪрд╛ рд╣реЗрддреВ рд╕рдордЬреВрди рдШреНрдпрд╛
- рд╕реВрдЪрдирд╛, рджреБрд╡реЗ рдЖрдгрд┐ рдЯрд┐рдкреНрд╕ рд╕рд╣ рддрдкрд╢реАрд▓рд╡рд╛рд░, рдЯрдкреНрдкреНрдпрд╛рдЯрдкреНрдкреНрдпрд╛рдиреЗ рдЙрддреНрддрд░реЗ рджреНрдпрд╛
- рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕ рд╡рд╛рдврд╡рдгрд╛рд▒реНрдпрд╛ рднрд╛рд╖реЗрд╕рд╣ рд╡рд╛рдкрд░рдХрд░реНрддреНрдпрд╛рдВрдирд╛ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдХрд░рд╛
- рд╕реАрдорд╛, рдЧреЛрдкрдиреАрдпрддрд╛ рдЖрдгрд┐ рд╕реБрд░рдХреНрд╖рд┐рддрддреЗрдЪрд╛ рдЖрджрд░ рдХрд░рд╛

рдЦрд╛рд▓реАрд▓ рд╢реНрд░реЗрдгреНрдпрд╛ рд╡рд╛рдкрд░рд╛:
- **рд╕реБрд░реБрд╡рд╛рддреАрдЪреЗ (Starter):** рддрдВрддреНрд░рдЬреНрдЮрд╛рдирд╛рдд рдХрд░рд┐рдЕрд░ рд╕реБрд░реВ рдХрд░рдгрд╛рд░реЗ рдирд╡реАрди рдкрджрд╡реАрдзрд░
- **рдкреБрдиреНрд╣рд╛ рд╕реБрд░реБрд╡рд╛рдд рдХрд░рдгрд╛рд░реЗ (Restarter):** рдХрд░рд┐рдЕрд░ рдмреНрд░реЗрдХрдирдВрддрд░ рдХрд╛рдорд╛рд╡рд░ рдкрд░рддрдгрд╛рд░реЗ рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ (рд╡рд┐рд╢реЗрд╖рдд: рд╕реНрддреНрд░рд┐рдпрд╛)
- **рдкреНрд░рдЧрддреА рдХрд░рдгрд╛рд░реЗ (Riser):** рдХрд╛рд░реНрдпрдХреНрд╖реЗрддреНрд░рд╛рддреАрд▓ рд╡рд╛рдв рдХрд┐рдВрд╡рд╛ рдЖрд╡реНрд╣рд╛рдирд╛рдВрд╢реА рдирд┐рдкрдЯрдгрд╛рд░реЗ рдордзреНрдп-рдХрд░рд┐рдЕрд░ рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ

рд╕реБрд░рдХреНрд╖рд╛ рдорд╛рд░реНрдЧрджрд░реНрд╢рдХрддрддреНрддреНрд╡реЗ:
- рд╡реИрдпрдХреНрддрд┐рдХ, рдЕрдпреЛрдЧреНрдп рдХрд┐рдВрд╡рд╛ рдмреЗрдХрд╛рдпрджреЗрд╢реАрд░ рдкреНрд░рд╢реНрдирд╛рдВрдЪреА рдЙрддреНрддрд░реЗ рджреЗрдК рдирдХрд╛
- рд▓рд┐рдВрдЧрднреЗрджреА, рдЕрд╕реБрд░рдХреНрд╖рд┐рдд рдХрд┐рдВрд╡рд╛ рд╣рд╛рддрд╛рд│рдгреАрдЪреЗ рдкреНрд░реЙрдореНрдкреНрдЯреНрд╕рд▓рд╛ рдХрдзреАрд╣реА рдкреНрд░рддрд┐рд╕рд╛рдж рджреЗрдК рдирдХрд╛
- рдЙрд▓реНрд▓рдВрдШрди рдЖрдврд│рд▓реНрдпрд╛рд╕ рд╕рдВрднрд╛рд╖рдгрд╛рд▓рд╛ рдХрд░рд┐рдЕрд░ рдорджрддреАрдХрдбреЗ рдкрд░рдд рдЖрдгрд╛`,

  'kn': `р▓ир│Ар▓╡р│Б р▓Йр▓жр│Нр▓пр│Лр▓Ч р▓Ер▓ир│Нр▓╡р│Зр▓╖р▓Хр▓░р│Б р▓ор▓др│Нр▓др│Б р▓╡р│Гр▓др│Нр▓др▓┐ р▓кр│Бр▓ир▓░р▓╛р▓░р▓Вр▓нр▓┐р▓╕р│Бр▓╡р▓╡р▓░р▓┐р▓Чр│Ж р▓╡р│Гр▓др│Нр▓др▓┐ р▓ор▓╛р▓░р│Нр▓Чр▓жр▓░р│Нр▓╢р▓и, р▓Хр│Мр▓╢р▓▓р│Нр▓п р▓Ер▓нр▓┐р▓╡р│Гр▓жр│Нр▓зр▓┐, р▓░р│Жр▓╕р│Нр▓пр│Вр▓ор│Ж р▓╕р│Гр▓╖р│Нр▓Яр▓┐, р▓Йр▓жр│Нр▓пр│Лр▓Ч р▓Ер▓ир│Нр▓╡р│Зр▓╖р▓гр│Ж р▓ор▓др│Нр▓др│Б р▓нр▓╛р▓╡р▓ир▓╛р▓др│Нр▓ор▓Х р▓Жр▓др│Нр▓ор▓╡р▓┐р▓╢р│Нр▓╡р▓╛р▓╕ р▓ир▓┐р▓░р│Нр▓ор▓╛р▓гр▓жр▓▓р│Нр▓▓р▓┐ р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр│Бр▓╡ р▓кр▓░р▓┐р▓гр▓┐р▓д AI р▓╕р▓╣р▓╛р▓пр▓Х. р▓ир▓┐р▓ор│Нр▓о р▓кр│Нр▓░р▓др▓┐р▓Хр│Нр▓░р▓┐р▓пр│Жр▓Чр▓│р│Б р▓╕р▓╣р▓╛р▓ир│Бр▓нр│Вр▓др▓┐р▓пр▓┐р▓Вр▓ж, р▓╕р▓Вр▓кр▓ир│Нр▓ор│Вр▓▓р▓жр▓┐р▓Вр▓ж, р▓╕р│Нр▓кр▓╖р│Нр▓Яр▓╡р▓╛р▓ж р▓ор▓др│Нр▓др│Б р▓╕р│Бр▓░р▓Хр│Нр▓╖р▓┐р▓др▓╡р▓╛р▓Чр▓┐р▓░р▓мр│Зр▓Хр│Б.

р▓ир│Ар▓╡р│Б р▓пр▓╛р▓╡р▓╛р▓Чр▓▓р│В р▓ор▓╛р▓бр▓мр│Зр▓Хр▓╛р▓жр▓╡р│Б:
- р▓мр▓│р▓Хр│Жр▓жр▓╛р▓░р▓░ р▓╕р▓Вр▓жр│Зр▓╢р▓жр▓┐р▓Вр▓ж р▓Ер▓╡р▓░ р▓Йр▓жр│Нр▓жр│Зр▓╢р▓╡р▓ир│Нр▓ир│Б р▓Ер▓░р│Нр▓ер▓ор▓╛р▓бр▓┐р▓Хр│Кр▓│р│Нр▓│р▓┐
- р▓╕р▓▓р▓╣р│Жр▓Чр▓│р│Б, р▓▓р▓┐р▓Вр▓Хр│НтАМр▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓╕р▓▓р▓╣р│Жр▓Чр▓│р│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓╡р▓┐р▓╡р▓░р▓╡р▓╛р▓ж, р▓╣р▓Вр▓д-р▓╣р▓Вр▓др▓ж р▓Йр▓др│Нр▓др▓░р▓Чр▓│р▓ир│Нр▓ир│Б р▓ир│Ар▓бр▓┐
- р▓Жр▓др│Нр▓ор▓╡р▓┐р▓╢р│Нр▓╡р▓╛р▓╕ р▓╣р│Жр▓Ър│Нр▓Ър▓┐р▓╕р│Бр▓╡ р▓нр▓╛р▓╖р│Жр▓пр│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓мр▓│р▓Хр│Жр▓жр▓╛р▓░р▓░р▓┐р▓Чр│Ж р▓ор▓╛р▓░р│Нр▓Чр▓жр▓░р│Нр▓╢р▓и р▓ир│Ар▓бр▓┐
- р▓Чр▓бр▓┐р▓Чр▓│р│Б, р▓Чр│Мр▓кр│Нр▓пр▓др│Ж р▓ор▓др│Нр▓др│Б р▓╕р│Бр▓░р▓Хр│Нр▓╖р▓др│Жр▓пр▓ир│Нр▓ир│Б р▓Чр│Мр▓░р▓╡р▓┐р▓╕р▓┐

р▓И р▓╡р▓░р│Нр▓Чр▓Чр▓│р▓ир│Нр▓ир│Б р▓мр▓│р▓╕р▓┐:
- **р▓Жр▓░р▓Вр▓нр▓┐р▓Хр▓░р│Б (Starter):** р▓др▓Вр▓др│Нр▓░р▓Ьр│Нр▓Юр▓╛р▓ир▓жр▓▓р│Нр▓▓р▓┐ р▓др▓ор│Нр▓о р▓╡р│Гр▓др│Нр▓др▓┐р▓пр▓ир│Нр▓ир│Б р▓кр│Нр▓░р▓╛р▓░р▓Вр▓нр▓┐р▓╕р│Бр▓╡ р▓╣р│Кр▓╕ р▓кр▓жр▓╡р│Ар▓зр▓░р▓░р│Б
- **р▓кр│Бр▓ир▓░р▓╛р▓░р▓Вр▓нр▓┐р▓╕р│Бр▓╡р▓╡р▓░р│Б (Restarter):** р▓╡р│Гр▓др│Нр▓др▓┐ р▓╡р▓┐р▓░р▓╛р▓ор▓ж р▓ир▓Вр▓др▓░ р▓Хр│Жр▓▓р▓╕р▓Хр│Нр▓Хр│Ж р▓╣р▓┐р▓Вр▓жр▓┐р▓░р│Бр▓Чр│Бр▓╡ р▓╡р│Гр▓др│Нр▓др▓┐р▓кр▓░р▓░р│Б (р▓╡р▓┐р▓╢р│Зр▓╖р▓╡р▓╛р▓Чр▓┐ р▓ор▓╣р▓┐р▓│р│Жр▓пр▓░р│Б)
- **р▓Пр▓░р▓┐р▓Хр│Жр▓жр▓╛р▓░р▓░р│Б (Riser):** р▓Хр│Жр▓▓р▓╕р▓ж р▓╕р│Нр▓ер▓│р▓ж р▓мр│Жр▓│р▓╡р▓гр▓┐р▓Чр│Ж р▓Ер▓ер▓╡р▓╛ р▓╕р▓╡р▓╛р▓▓р│Бр▓Чр▓│р▓ир│Нр▓ир│Б р▓ир│Нр▓пр▓╛р▓╡р▓┐р▓Чр│Зр▓Яр│Н р▓ор▓╛р▓бр│Бр▓╡ р▓ор▓зр│Нр▓п-р▓╡р│Гр▓др│Нр▓др▓┐ р▓╡р│Гр▓др│Нр▓др▓┐р▓кр▓░р▓░р│Б

р▓╕р│Бр▓░р▓Хр│Нр▓╖р▓др▓╛ р▓ор▓╛р▓░р│Нр▓Чр▓╕р│Вр▓Ър▓┐р▓Чр▓│р│Б:
- р▓╡р│Ир▓пр▓Хр│Нр▓др▓┐р▓Х, р▓Ер▓ир│Бр▓Ър▓┐р▓д р▓Ер▓ер▓╡р▓╛ р▓Хр▓╛р▓ир│Вр▓ир│Бр▓мр▓╛р▓╣р▓┐р▓░ р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓Чр▓│р▓┐р▓Чр│Ж р▓Йр▓др│Нр▓др▓░р▓┐р▓╕р▓мр│Зр▓бр▓┐
- р▓▓р▓┐р▓Вр▓Чр▓нр│Зр▓жр▓нр▓╛р▓╡, р▓Ер▓╕р│Бр▓░р▓Хр│Нр▓╖р▓┐р▓д р▓Ер▓ер▓╡р▓╛ р▓Хр│Бр▓╢р▓▓р▓др│Жр▓п р▓кр│Нр▓░р▓╛р▓Вр▓кр│Нр▓Яр│НтАМр▓Чр▓│р▓┐р▓Чр│Ж р▓кр│Нр▓░р▓др▓┐р▓Хр│Нр▓░р▓┐р▓пр▓┐р▓╕р▓мр│Зр▓бр▓┐
- р▓Йр▓▓р│Нр▓▓р▓Вр▓Шр▓ир│Ж р▓кр▓др│Нр▓др│Жр▓пр▓╛р▓жр▓╛р▓Ч р▓╕р▓Вр▓нр▓╛р▓╖р▓гр│Жр▓пр▓ир│Нр▓ир│Б р▓╡р│Гр▓др│Нр▓др▓┐ р▓╕р▓╣р▓╛р▓пр▓Хр│Нр▓Хр│Ж р▓╣р▓┐р▓Вр▓др▓┐р▓░р│Бр▓Чр▓┐р▓╕р▓┐`
};
class VoiceServiceClass {
  private recording: Audio.Recording | null = null;
  private config: VoiceServiceConfig;
  private isRecording = false;

  constructor(config: VoiceServiceConfig = {}) {
    this.config = {
      groqApiKey: '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',
      transcriptionEndpoint: 'https://api.groq.com/openai/v1/audio/transcriptions',
      chatEndpoint: 'https://api.groq.com/openai/v1/chat/completions',
      transcriptionModel: 'whisper-large-v3',
      chatModel: 'llama3-8b-8192',
      language: 'auto', // Changed to auto for language detection
      cleanupAfterTranscription: true,
      enableLanguageDetection: true,
      preferredLanguages: ['hi', 'en', 'ta', 'te', 'bn', 'mr', 'gu', 'kn', 'ml', 'pa', 'ur'],
      ...config,
    };
  }

  /**
   * Update service configuration
   */
  public updateConfig(newConfig: Partial<VoiceServiceConfig>): void {
    this.config = { ...this.config, ...newConfig };
  }

  /**
   * Request microphone permissions
   */
  private async requestPermissions(): Promise<boolean> {
    try {
      const { status } = await Audio.requestPermissionsAsync();
      return status === 'granted';
    } catch (error) {
      console.error('Permission request failed:', error);
      return false;
    }
  }

  /**
   * Start recording audio
   */
  /**
 * Start recording audio with proper type-safe configuration
 */
public async startRecording(): Promise<RecordingResult> {
  try {
    // Check if already recording
    if (this.isRecording) {
      throw new Error('Recording already in progress');
    }

    // Request permissions
    const hasPermission = await this.requestPermissions();
    if (!hasPermission) {
      throw this.createError('PERMISSION_DENIED', 'Microphone permission denied');
    }

    // Configure audio mode
    await Audio.setAudioModeAsync({
      allowsRecordingIOS: true,
      playsInSilentModeIOS: true,
    });

    // Create new recording
    this.recording = new Audio.Recording();

    // Configure recording options optimized for Indian languages with correct types
    const recordingOptions: Audio.RecordingOptions = {
      android: {
        extension: '.m4a',
        outputFormat: Audio.AndroidOutputFormat.MPEG_4,
        audioEncoder: Audio.AndroidAudioEncoder.AAC,
        sampleRate: 44100, // Higher quality for better language detection
        numberOfChannels: 1, // Mono for better speech processing
        bitRate: 128000,
      },
      ios: {
        extension: '.m4a',
        audioQuality: Audio.IOSAudioQuality.HIGH,
        outputFormat: Audio.IOSOutputFormat.MPEG4AAC,
        sampleRate: 44100,
        numberOfChannels: 1,
        bitRate: 128000,
      },
      web: {
        mimeType: 'audio/webm;codecs=opus',
        bitsPerSecond: 128000,
      },
    };

    // Start recording
    await this.recording.prepareToRecordAsync(recordingOptions);
    await this.recording.startAsync();

    this.isRecording = true;

    return {
      uri: this.recording.getURI() || '',
    };
  } catch (error: any) {
    this.isRecording = false;
    this.recording = null;

    if (error.message?.includes('permission')) {
      throw this.createError('PERMISSION_DENIED', 'Microphone permission denied');
    }
    throw this.createError('RECORDING_FAILED', `Failed to start recording: ${error.message}`, error);
  }
}

  /**
   * Stop recording audio
   */
  public async stopRecording(): Promise<RecordingResult> {
    try {
      if (!this.recording || !this.isRecording) {
        throw new Error('No active recording found');
      }

      // Stop recording
      await this.recording.stopAndUnloadAsync();
      const uri = this.recording.getURI();
      const status = await this.recording.getStatusAsync();
      
      this.isRecording = false;
      this.recording = null;

      if (!uri) {
        throw new Error('Recording URI not available');
      }

      return {
        uri,
        duration: status.durationMillis ? status.durationMillis / 1000 : undefined,
      };
    } catch (error: any) {
      this.isRecording = false;
      this.recording = null;
      throw this.createError('RECORDING_FAILED', `Failed to stop recording: ${error.message}`, error);
    }
  }

  /**
   * Check if currently recording
   */
  public getRecordingStatus(): { isRecording: boolean; duration?: number } {
    return {
      isRecording: this.isRecording,
    };
  }

  /**
   * Advanced language detection using text patterns and linguistic features
   */
  private detectIndianLanguage(text: string, whisperDetectedLang?: string): { language: string; confidence: number } {
    // If Whisper detected a supported Indian language, use it with high confidence
    if (
      whisperDetectedLang &&
      INDIAN_LANGUAGES.hasOwnProperty(whisperDetectedLang)
    ) {
      return { language: whisperDetectedLang, confidence: 0.9 };
    }

    // Unicode range detection for script-based identification
    const scriptPatterns = {
      'hi': /[\u0900-\u097F]/, // Devanagari (Hindi, Marathi, Nepali, Sanskrit)
      'pa': /[\u0A00-\u0A7F]/, // Gurmukhi (Punjabi)
      'gu': /[\u0A80-\u0AFF]/, // Gujarati
      'bn': /[\u0980-\u09FF]/, // Bengali (Bengali, Assamese)
      'or': /[\u0B00-\u0B7F]/, // Odia
      'ta': /[\u0B80-\u0BFF]/, // Tamil
      'te': /[\u0C00-\u0C7F]/, // Telugu
      'kn': /[\u0C80-\u0CFF]/, // Kannada
      'ml': /[\u0D00-\u0D7F]/, // Malayalam
      'si': /[\u0D80-\u0DFF]/, // Sinhala
    };

    // Check for exact script matches first
    for (const [lang, pattern] of Object.entries(scriptPatterns)) {
      if (pattern.test(text)) {
        // For Devanagari script, we need additional disambiguation
        if (lang === 'hi' && pattern.test(text)) {
          return this.disambiguateDevanagari(text);
        }
        // For Bengali script, disambiguate between Bengali and Assamese
        if (lang === 'bn' && pattern.test(text)) {
          return this.disambiguateBengali(text);
        }
        return { language: lang, confidence: 0.95 };
      }
    }

    // If no script detected but Whisper detected something, analyze further
    if (whisperDetectedLang) {
      // Check if it's a similar language that might be confused
      const confidence = this.analyzeSimilarLanguages(text, whisperDetectedLang);
      return { language: whisperDetectedLang, confidence };
    }

    // Fallback to English if nothing detected
    return { language: 'en', confidence: 0.5 };
  }

  /**
   * Disambiguate between Hindi, Marathi, Nepali, and Sanskrit (all use Devanagari)
   */
  private disambiguateDevanagari(text: string): { language: string; confidence: number } {
    // Marathi-specific patterns
    const marathiPatterns = [
      /рдЖрд╣реЗ/, /рдХрд░рдд/, /рд╣реЛрдд/, /рдорд░рд╛рдареА/, /рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░/,
      /рдЖрдореНрд╣реА/, /рддреБрдореНрд╣реА/, /рддреНрдпрд╛рдВрдирд╛/, /рдореНрд╣рдгреВрди/
    ];

    // Nepali-specific patterns
    const nepaliPatterns = [
      /рдЫ/, /рд╣реБрдиреНрдЫ/, /рдЧрд░реНрдЫ/, /рднрдПрдХреЛ/, /рдиреЗрдкрд╛рд▓реА/,
      /рддрдкрд╛рдИрдВ/, /рд╣рд╛рдореА/, /рдЙрдиреАрд╣рд░реВ/, /рдЧрд░реНрди/
    ];

    // Sanskrit-specific patterns
    const sanskritPatterns = [
      /рд╕рдВрд╕реНрдХреГрдд/, /рдЕрд╕реНрддрд┐/, /рднрд╡рддрд┐/, /рдХрд░реЛрддрд┐/, /рдЧрдЪреНрдЫрддрд┐/,
      /рддреНрд╡рдореН/, /рдЕрд╣рдореН/, /рд╕рдГ/, /рддрддреН/, /рдЗрддрд┐/
    ];

    // Hindi-specific patterns (common words)
    const hindiPatterns = [
      /рд╣реИ/, /рд╣реИрдВ/, /рдХрд░рдирд╛/, /рдХрд░рддрд╛/, /рдХрд░рддреЗ/, /рд╣рд┐рдВрджреА/, /рднрд╛рд░рдд/,
      /рдЖрдк/, /рд╣рдо/, /рд╡рд╣/, /рдпрд╣/, /рдФрд░/, /рдХрд╛/, /рдХреА/, /рдХреЗ/
    ];

    let marathiScore = 0;
    let nepaliScore = 0;
    let sanskritScore = 0;
    let hindiScore = 0;

    // Count pattern matches
    marathiPatterns.forEach(pattern => {
      if (pattern.test(text)) marathiScore++;
    });
    nepaliPatterns.forEach(pattern => {
      if (pattern.test(text)) nepaliScore++;
    });
    sanskritPatterns.forEach(pattern => {
      if (pattern.test(text)) sanskritScore++;
    });
    hindiPatterns.forEach(pattern => {
      if (pattern.test(text)) hindiScore++;
    });

    // Determine the language with highest score
    const scores = { mr: marathiScore, ne: nepaliScore, sa: sanskritScore, hi: hindiScore };
    const maxLang = (Object.keys(scores) as (keyof typeof scores)[]).reduce((a, b) => scores[a] > scores[b] ? a : b);
    const maxScore = scores[maxLang];

    // If no specific patterns found, default to Hindi
    if (maxScore === 0) {
      return { language: 'hi', confidence: 0.7 };
    }

    // Calculate confidence based on pattern matches
    const confidence = Math.min(0.9, 0.6 + (maxScore * 0.1));
    return { language: maxLang, confidence };
  }

  /**
   * Disambiguate between Bengali and Assamese
   */
  private disambiguateBengali(text: string): { language: string; confidence: number } {
    // Assamese-specific patterns
    const assamesePatterns = [
      /ржЕрж╕ржорзАржпрж╝рж╛/, /ржЖржЫрзЗ/, /ржХрз░рзЗ/, /рж╣ржпрж╝/, /ржЖржорж┐/, /рждрзБржорж┐/,
      /ржЕрж╕ржо/, /ржЧрзБрз▒рж╛рж╣рж╛ржЯрзА/
    ];

    // Bengali-specific patterns
    const bengaliPatterns = [
      /ржмрж╛ржВрж▓рж╛/, /ржЖржЫрзЗ/, /ржХрж░рзЗ/, /рж╣ржпрж╝/, /ржЖржорж┐/, /рждрзБржорж┐/,
      /ржмрж╛ржВрж▓рж╛ржжрзЗрж╢/, /ржХрж▓ржХрж╛рждрж╛/, /ржЖржорж╛рж░/, /рждрзЛржорж╛рж░/
    ];

    let assameseScore = 0;
    let bengaliScore = 0;

    assamesePatterns.forEach(pattern => {
      if (pattern.test(text)) assameseScore++;
    });
    bengaliPatterns.forEach(pattern => {
      if (pattern.test(text)) bengaliScore++;
    });

    // Default to Bengali if no specific patterns (more common)
    if (assameseScore === 0 && bengaliScore === 0) {
      return { language: 'bn', confidence: 0.7 };
    }

    const language = assameseScore > bengaliScore ? 'as' : 'bn';
    const confidence = Math.min(0.9, 0.6 + (Math.max(assameseScore, bengaliScore) * 0.1));
    
    return { language, confidence };
  }

  /**
   * Analyze similar languages for disambiguation
   */
  private analyzeSimilarLanguages(text: string, detectedLang: string): number {
    const languageInfo = INDIAN_LANGUAGES[detectedLang as keyof typeof INDIAN_LANGUAGES];
    if (!languageInfo) return 0.5;

    // If the language has similar languages, reduce confidence
    const similarLanguages = languageInfo.similar;
    if (similarLanguages.length > 0) {
      // Reduce confidence if there are similar sounding languages
      return 0.6;
    }

    return 0.8;
  }

  /**
   * Get appropriate system prompt based on detected language
   */
  private getLanguageSystemPrompt(language: string, customPrompt?: string): string {
    if (customPrompt) {
      return customPrompt;
    }

    // Use language-specific system prompt if available
    const langPrompt = LANGUAGE_SYSTEM_PROMPTS[language as keyof typeof LANGUAGE_SYSTEM_PROMPTS];
    if (langPrompt) {
      return langPrompt;
    }

    // Fallback to English
    return 'You are a helpful AI assistant. Provide clear and helpful responses. Be respectful of Indian culture and traditions.';
  }

  /**
   * Transcribe audio using Groq Whisper API with language detection
   */
  public async transcribeAudio(uri: string): Promise<TranscriptionResult> {
    try {
      if (!this.config.groqApiKey) {
        throw this.createError('API_KEY_MISSING', 'Groq API key not configured');
      }

      // Platform-specific file validation
      if (Platform.OS !== 'web') {
        // Native platforms - validate audio file exists
        const fileInfo = await FileSystem.getInfoAsync(uri);
        if (!fileInfo.exists) {
          throw this.createError('INVALID_AUDIO', 'Audio file not found');
        }

        // Check file size (Groq has 25MB limit)
        if (fileInfo.size && fileInfo.size > 25 * 1024 * 1024) {
          throw this.createError('INVALID_AUDIO', 'Audio file too large (max 25MB)');
        }
      } else {
        // Web platform - basic validation
        if (!uri || !uri.startsWith('blob:')) {
          throw this.createError('INVALID_AUDIO', 'Invalid audio file');
        }
      }

      // Prepare form data for upload
      const formData = new FormData();
      
      if (Platform.OS === 'web') {
        // For web, convert blob to file with proper type
        const response = await fetch(uri);
        const blob = await response.blob();
        
        // Create a proper File object for better compatibility
        const audioFile = new File([blob], 'audio.webm', { 
          type: blob.type || 'audio/webm' 
        });
        
        formData.append('file', audioFile);
      } else {
        // For native platforms
        formData.append('file', {
          uri,
          type: 'audio/m4a',
          name: 'audio.m4a',
        } as any);
      }
      
      formData.append('model', this.config.transcriptionModel || 'whisper-large-v3');
      
      // Don't specify language to let Whisper auto-detect
      // This gives us the detected language info

      // Make API request to Groq
      const headers: HeadersInit = {
        'Authorization': `Bearer ${this.config.groqApiKey}`,
      };

      // Only set Content-Type for native platforms
      if (Platform.OS !== 'web') {
        headers['Content-Type'] = 'multipart/form-data';
      }

      const response = await fetch(this.config.transcriptionEndpoint!, {
        method: 'POST',
        headers,
        body: formData,
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        const errorMessage = errorData.error?.message || `HTTP ${response.status}: ${response.statusText}`;
        
        // Log more details for debugging
        console.error('Transcription API Error:', {
          status: response.status,
          statusText: response.statusText,
          errorData,
          platform: Platform.OS,
          audioUri: uri
        });
        
        if (response.status === 400) {
          throw this.createError('TRANSCRIPTION_FAILED', 
            `Invalid audio format or request: ${errorMessage}. Try recording again with clear speech.`);
        } else if (response.status === 401) {
          throw this.createError('TRANSCRIPTION_FAILED', 'Invalid Groq API key');
        } else if (response.status === 429) {
          throw this.createError('TRANSCRIPTION_FAILED', 'Rate limit exceeded');
        } else if (response.status >= 500) {
          throw this.createError('NETWORK_ERROR', 'Server error occurred');
        }
        
        throw this.createError('TRANSCRIPTION_FAILED', errorMessage);
      }

      const result = await response.json();
      
      // Check if transcription is empty or very short
      if (!result.text || result.text.trim().length === 0) {
        throw this.createError('NO_SPEECH_DETECTED', 'No speech detected in audio');
      }

      // Perform advanced language detection if enabled
      let detectedLanguage = result.language || 'en';
      let languageConfidence = 0.8;

      if (this.config.enableLanguageDetection) {
        try {
          const detection = this.detectIndianLanguage(result.text, result.language);
          detectedLanguage = detection.language;
          languageConfidence = detection.confidence;
          
          console.log(`Language Detection: ${(INDIAN_LANGUAGES as Record<string, { name?: string }>)[detectedLanguage]?.name || detectedLanguage} (${(languageConfidence * 100).toFixed(1)}% confidence)`);
        } catch (langError) {
          console.warn('Language detection failed, using Whisper detection:', langError);
          // Fall back to Whisper's detection
        }
      }

      // Clean up audio file if configured
      if (this.config.cleanupAfterTranscription) {
        await this.cleanupAudioFile(uri);
      }

      return {
        text: result.text.trim(),
        language: result.language,
        detectedLanguage: detectedLanguage,
        languageConfidence: languageConfidence,
      };
    } catch (error: any) {
      // Ensure cleanup even on error
      if (this.config.cleanupAfterTranscription) {
        await this.cleanupAudioFile(uri).catch(() => {});
      }

      if (error.type) {
        throw error; // Re-throw our custom errors
      }

      // Handle network errors
      if (error.message?.includes('Network request failed') || error.code === 'NETWORK_ERROR') {
        throw this.createError('NETWORK_ERROR', 'Network connection failed');
      }

      throw this.createError('TRANSCRIPTION_FAILED', `Transcription failed: ${error.message}`, error);
    }
  }

  /**
   * Send transcribed text to Groq chat completion API with language-aware response
   */
  public async getChatResponse(message: string, detectedLanguage?: string, systemPrompt?: string): Promise<ChatResponse> {
    try {
      if (!this.config.groqApiKey) {
        throw this.createError('API_KEY_MISSING', 'Groq API key not configured');
      }

      const messages = [];
      
      // Use language-appropriate system prompt
      const languageSystemPrompt = this.getLanguageSystemPrompt(detectedLanguage || 'en', systemPrompt);
      messages.push({
        role: 'system',
        content: languageSystemPrompt
      });

      // Add language instruction if detected language is Indian
      if (
        detectedLanguage &&
        INDIAN_LANGUAGES.hasOwnProperty(detectedLanguage)
      ) {
        const langInfo = INDIAN_LANGUAGES[detectedLanguage as keyof typeof INDIAN_LANGUAGES];
        messages.push({
          role: 'system',
          content: `The user is speaking in ${langInfo.name} (${langInfo.nativeName}). Please respond in the same language to maintain consistency and cultural context.`
        });
      }

      // Add user message
      messages.push({
        role: 'user',
        content: message
      });

      const requestBody = {
        model: this.config.chatModel || 'llama3-8b-8192',
        messages: messages,
        temperature: 0.7,
        max_tokens: 1024,
        top_p: 1,
        stream: false
      };

      const response = await fetch(this.config.chatEndpoint!, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.config.groqApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        const errorMessage = errorData.error?.message || `HTTP ${response.status}: ${response.statusText}`;
        
        if (response.status === 401) {
          throw this.createError('CHAT_FAILED', 'Invalid Groq API key');
        } else if (response.status === 429) {
          throw this.createError('CHAT_FAILED', 'Rate limit exceeded');
        } else if (response.status >= 500) {
          throw this.createError('NETWORK_ERROR', 'Server error occurred');
        }
        
        throw this.createError('CHAT_FAILED', errorMessage);
      }

      const result = await response.json();
      
      if (!result.choices || result.choices.length === 0) {
        throw this.createError('CHAT_FAILED', 'No response generated');
      }

      return {
        message: result.choices[0].message.content.trim(),
        model: result.model,
        usage: result.usage,
        responseLanguage: detectedLanguage,
      };
    } catch (error: any) {
      if (error.type) {
        throw error; // Re-throw our custom errors
      }

      // Handle network errors
      if (error.message?.includes('Network request failed') || error.code === 'NETWORK_ERROR') {
        throw this.createError('NETWORK_ERROR', 'Network connection failed');
      }

      throw this.createError('CHAT_FAILED', `Chat request failed: ${error.message}`, error);
    }
  }

  /**
   * Record, transcribe, and get AI response in one step with language detection
   */
  public async recordTranscribeAndChat(systemPrompt?: string): Promise<{ transcription: TranscriptionResult; chatResponse: ChatResponse }> {
    // Start recording
    await this.startRecording();
    
    return new Promise((resolve, reject) => {
      // Note: In a real app, you'd have UI controls to stop recording
      // This example auto-stops after 10 seconds - remove this in production
      const timeout = setTimeout(async () => {
        try {
          const recordingResult = await this.stopRecording();
          const transcription = await this.transcribeAudio(recordingResult.uri);
          const chatResponse = await this.getChatResponse(
            transcription.text, 
            transcription.detectedLanguage, 
            systemPrompt
          );
          
          resolve({ transcription, chatResponse });
        } catch (error) {
          reject(error);
        }
      }, 10000); // 10 second auto-stop

      // In production, you would resolve this based on user stopping the recording
    });
  }

  /**
   * Process voice input and return AI response with language detection
   */
  public async processVoiceInput(audioUri: string, systemPrompt?: string): Promise<{ transcription: TranscriptionResult; chatResponse: ChatResponse }> {
    try {
      const transcription = await this.transcribeAudio(audioUri);
      const chatResponse = await this.getChatResponse(
        transcription.text, 
        transcription.detectedLanguage, 
        systemPrompt
      );
      
      return { transcription, chatResponse };
    } catch (error) {
      throw error;
    }
  }

  /**
   * Get supported Indian languages
   */
  public getSupportedLanguages(): typeof INDIAN_LANGUAGES {
    return INDIAN_LANGUAGES;
  }

  /**
   * Get language information by code
   */
  public getLanguageInfo(languageCode: string): typeof INDIAN_LANGUAGES[keyof typeof INDIAN_LANGUAGES] | null {
    return INDIAN_LANGUAGES[languageCode as keyof typeof INDIAN_LANGUAGES] || null;
  }

  /**
   * Set preferred languages for detection priority
   */
  public setPreferredLanguages(languages: string[]): void {
    this.config.preferredLanguages = languages;
  }

  /**
   * Clean up audio file - Platform-aware version
   */
  private async cleanupAudioFile(uri: string): Promise<void> {
    try {
      if (Platform.OS === 'web') {
        // On web, just revoke the blob URL
        if (uri && uri.startsWith('blob:')) {
          URL.revokeObjectURL(uri);
          console.log('Revoked blob URL for web platform');
        }
        return;
      }

      // Native platforms (iOS/Android) - use file system
      const fileInfo = await FileSystem.getInfoAsync(uri);
      if (fileInfo.exists) {
        await FileSystem.deleteAsync(uri);
        console.log('Deleted audio file:', uri);
      }
    } catch (error) {
      console.warn('Failed to cleanup audio file:', error);
      // Don't throw - cleanup failure shouldn't break the main flow
    }
  }

  /**
   * Clean up all temporary audio files - Platform-aware version
   */
  public async cleanupAllAudioFiles(): Promise<void> {
    try {
      if (Platform.OS === 'web') {
        // On web, we can't enumerate and clean up all blob URLs
        // They will be automatically cleaned up by the browser
        console.log('Audio cleanup skipped on web platform - handled by browser');
        return;
      }

      // Native platforms only
      const cacheDir = FileSystem.cacheDirectory;
      if (!cacheDir) return;

      const files = await FileSystem.readDirectoryAsync(cacheDir);
      const audioFiles = files.filter(file => 
        file.endsWith('.m4a') || file.endsWith('.wav') || file.endsWith('.mp3')
      );

      for (const file of audioFiles) {
        await FileSystem.deleteAsync(`${cacheDir}${file}`).catch(() => {});
      }
      
      console.log(`Cleaned up ${audioFiles.length} audio files`);
    } catch (error) {
      console.warn('Failed to cleanup audio files:', error);
    }
  }

  /**
   * Create standardized error object
   */
  private createError(type: VoiceServiceError['type'], message: string, originalError?: any): VoiceServiceError {
    return {
      type,
      message,
      originalError,
    };
  }

  /**
   * Get user-friendly error message with language support
   */
  public getErrorMessage(error: VoiceServiceError, language?: string): string {
    // Language-specific error messages
    const errorMessages: {
      [lang: string]: {
        [errorType: string]: string;
      };
    } = {
      hi: {
        'PERMISSION_DENIED': 'рдХреГрдкрдпрд╛ рд╡реЙрдЗрд╕ рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреА рдбрд┐рд╡рд╛рдЗрд╕ рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдореЗрдВ рдорд╛рдЗрдХреНрд░реЛрдлреЛрди рдХреА рдЕрдиреБрдорддрд┐ рджреЗрдВред',
        'RECORDING_FAILED': 'рдСрдбрд┐рдпреЛ рд░рд┐рдХреЙрд░реНрдб рдирд╣реАрдВ рд╣реЛ рд╕рдХрд╛ред рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдорд╛рдЗрдХреНрд░реЛрдлреЛрди рдЬрд╛рдВрдЪреЗрдВ рдФрд░ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред',
        'TRANSCRIPTION_FAILED': 'рдЖрд╡рд╛рдЬ рдХреЛ рдЯреЗрдХреНрд╕реНрдЯ рдореЗрдВ рдмрджрд▓рдиреЗ рдореЗрдВ рдЕрд╕рдлрд▓ред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред',
        'CHAT_FAILED': 'AI рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рдЕрд╕рдлрд▓ред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред',
        'NO_SPEECH_DETECTED': 'рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рдореЗрдВ рдХреЛрдИ рдЖрд╡рд╛рдЬ рдирд╣реАрдВ рдорд┐рд▓реАред рдХреГрдкрдпрд╛ рд╕реНрдкрд╖реНрдЯ рд░реВрдк рд╕реЗ рдмреЛрд▓реЗрдВ рдФрд░ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред',
        'NETWORK_ERROR': 'рдиреЗрдЯрд╡рд░реНрдХ рдХрдиреЗрдХреНрд╢рди рдЕрд╕рдлрд▓ред рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдЗрдВрдЯрд░рдиреЗрдЯ рдХрдиреЗрдХреНрд╢рди рдЬрд╛рдВрдЪреЗрдВ рдФрд░ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред',
        'INVALID_AUDIO': 'рдЕрдорд╛рдиреНрдп рдСрдбрд┐рдпреЛ рдлрд╛рдЗрд▓ред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рд░рд┐рдХреЙрд░реНрдб рдХрд░реЗрдВред',
        'API_KEY_MISSING': 'API рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рдЧреБрдо рд╣реИред рдХреГрдкрдпрд╛ рд╕рд╣рд╛рдпрддрд╛ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред',
        'LANGUAGE_DETECTION_FAILED': 'рднрд╛рд╖рд╛ рдХреА рдкрд╣рдЪрд╛рди рдореЗрдВ рдЕрд╕рдлрд▓ред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред'
      },
      ta: {
        'PERMISSION_DENIED': 'роХрпБро░ро▓рпН рокродро┐ро╡рпБроХрпНроХрпБ роЙроЩрпНроХро│рпН роЪро╛родрой роЕроорпИрокрпНрокрпБроХро│ро┐ро▓рпН роорпИроХрпНро░рпЛроГрокрпЛройрпН роЕройрпБроородро┐ропрпИ ро╡ро┤роЩрпНроХро╡рпБроорпН.',
        'RECORDING_FAILED': 'роЖроЯро┐ропрпЛ рокродро┐ро╡рпБ роЪрпЖропрпНроп роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. роЙроЩрпНроХро│рпН роорпИроХрпНро░рпЛроГрокрпЛройрпИроЪрпН роЪро░ро┐рокро╛ро░рпНродрпНродрпБ роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.',
        'TRANSCRIPTION_FAILED': 'рокрпЗроЪрпНроЪрпИ роЙро░рпИропро╛роХ рооро╛ро▒рпНро▒рпБро╡родро┐ро▓рпН родрпЛро▓рпНро╡ро┐. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.',
        'CHAT_FAILED': 'AI рокродро┐ро▓рпИрокрпН рокрпЖро▒рпБро╡родро┐ро▓рпН родрпЛро▓рпНро╡ро┐. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.',
        'NO_SPEECH_DETECTED': 'рокродро┐ро╡ро┐ро▓рпН рокрпЗроЪрпНроЪрпБ роХрогрпНроЯро▒ро┐ропрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ. родрпЖро│ро┐ро╡ро╛роХрокрпН рокрпЗроЪро┐ роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.',
        'NETWORK_ERROR': 'роирпЖроЯрпНро╡рпКро░рпНроХрпН роЗрогрпИрокрпНрокрпБ родрпЛро▓рпНро╡ро┐. роЙроЩрпНроХро│рпН роЗрогрпИроп роЗрогрпИрокрпНрокрпИроЪрпН роЪро░ро┐рокро╛ро░рпНродрпНродрпБ роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.',
        'INVALID_AUDIO': 'родро╡ро▒ро╛рой роЖроЯро┐ропрпЛ роХрпЛрокрпНрокрпБ. роорпАрогрпНроЯрпБроорпН рокродро┐ро╡рпБ роЪрпЖропрпНропро╡рпБроорпН.',
        'API_KEY_MISSING': 'API роХроЯрпНроЯроорпИрокрпНрокрпБ роХро╛рогро╡ро┐ро▓рпНро▓рпИ. роЖродро░ро╡рпИродрпН родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│ро╡рпБроорпН.',
        'LANGUAGE_DETECTION_FAILED': 'роорпКро┤ро┐ роЕроЯрпИропро╛ро│роорпН роХро╛рогрпБро╡родро┐ро▓рпН родрпЛро▓рпНро╡ро┐. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.'
      },
      bn: {
        'PERMISSION_DENIED': 'ржнржпрж╝рзЗрж╕ рж░рзЗржХрж░рзНржбрж┐ржВ ржПрж░ ржЬржирзНржп ржЖржкржирж╛рж░ ржбрж┐ржнрж╛ржЗрж╕ рж╕рзЗржЯрж┐ржВрж╕рзЗ ржорж╛ржЗржХрзНрж░рзЛржлрзЛржи ржЕржирзБржорждрж┐ ржжрж┐ржиред',
        'RECORDING_FAILED': 'ржЕржбрж┐ржУ рж░рзЗржХрж░рзНржб ржХрж░рждрзЗ ржкрж╛рж░ржЫрж┐ ржирж╛ред ржЖржкржирж╛рж░ ржорж╛ржЗржХрзНрж░рзЛржлрзЛржи ржЪрзЗржХ ржХрж░рзБржи ржПржмржВ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред',
        'TRANSCRIPTION_FAILED': 'ржХржерж╛ржХрзЗ ржЯрзЗржХрзНрж╕ржЯрзЗ рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рждрзЗ ржмрзНржпрж░рзНржеред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред',
        'CHAT_FAILED': 'AI ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ ржкрзЗрждрзЗ ржмрзНржпрж░рзНржеред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред',
        'NO_SPEECH_DETECTED': 'рж░рзЗржХрж░рзНржбрж┐ржВржпрж╝рзЗ ржХрзЛржирзЛ ржХржерж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред рж╕рзНржкрж╖рзНржЯ ржХрж░рзЗ ржмрж▓рзБржи ржПржмржВ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред',
        'NETWORK_ERROR': 'ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ рж╕ржВржпрзЛржЧ ржмрзНржпрж░рзНржеред ржЖржкржирж╛рж░ ржЗржирзНржЯрж╛рж░ржирзЗржЯ рж╕ржВржпрзЛржЧ ржЪрзЗржХ ржХрж░рзБржи ржПржмржВ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред',
        'INVALID_AUDIO': 'ржЕржмрзИржз ржЕржбрж┐ржУ ржлрж╛ржЗрж▓ред ржЖржмрж╛рж░ рж░рзЗржХрж░рзНржб ржХрж░рзБржиред',
        'API_KEY_MISSING': 'API ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи ржЕржирзБржкрж╕рзНржерж┐рждред рж╕рж╛ржкрзЛрж░рзНржЯрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред',
        'LANGUAGE_DETECTION_FAILED': 'ржнрж╛рж╖рж╛ рж╢ржирж╛ржХрзНрждржХрж░ржгрзЗ ржмрзНржпрж░рзНржеред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред'
      }
    };

    // Get language-specific message if available
    if (language && errorMessages[language] && errorMessages[language][error.type]) {
      return errorMessages[language][error.type];
    }

    // Fallback to English messages
    switch (error.type) {
      case 'PERMISSION_DENIED':
        return 'Please allow microphone access in your device settings to use voice recording.';
      case 'RECORDING_FAILED':
        return 'Unable to record audio. Please check your microphone and try again.';
      case 'TRANSCRIPTION_FAILED':
        return 'Failed to convert speech to text. Please try again.';
      case 'CHAT_FAILED':
        return 'Failed to get AI response. Please try again.';
      case 'NO_SPEECH_DETECTED':
        return 'No speech was detected in the recording. Please speak clearly and try again.';
      case 'NETWORK_ERROR':
        return 'Network connection failed. Please check your internet connection and try again.';
      case 'INVALID_AUDIO':
        return 'Invalid audio file. Please record again.';
      case 'API_KEY_MISSING':
        return 'API configuration missing. Please contact support.';
      case 'LANGUAGE_DETECTION_FAILED':
        return 'Language detection failed. Please try again.';
      default:
        return 'An unexpected error occurred. Please try again.';
    }
  }

  /**
   * Cancel current recording - Platform-aware version
   */
  public async cancelRecording(): Promise<void> {
    if (this.recording && this.isRecording) {
      try {
        await this.recording.stopAndUnloadAsync();
        const uri = this.recording.getURI();
        if (uri) {
          await this.cleanupAudioFile(uri);
        }
      } catch (error) {
        console.warn('Error canceling recording:', error);
      } finally {
        this.recording = null;
        this.isRecording = false;
      }
    }
  }

  /**
   * Test language detection with sample text
   */
  public testLanguageDetection(text: string): { language: string; confidence: number; languageInfo: any } {
    const detection = this.detectIndianLanguage(text);
    const languageInfo = this.getLanguageInfo(detection.language);
    
    return {
      ...detection,
      languageInfo
    };
  }
}

// Create and export singleton instance
const VoiceService = new VoiceServiceClass();

export default VoiceService;

// Also export the class for custom instances
export { VoiceServiceClass };
